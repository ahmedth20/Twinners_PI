const Doctor = require("../models/doctors");
const User = require("../models/user");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");

const doctorController = {
  // üìå R√©cup√©rer tous les m√©decins
  async getAllDoctors(req, res) {
    try {
      const doctors = await Doctor.find().populate("user", "firstName lastName email");
      res.json(doctors);
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des m√©decins", error });
    }
  },

  // üìå R√©cup√©rer un m√©decin par ID
  async getDoctorById(req, res) {
    try {
      const doctor = await Doctor.findById(req.params.id).populate("user", "firstName lastName email");
      if (!doctor) return res.status(404).json({ message: "M√©decin non trouv√©" });
      res.json(doctor);
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration du m√©decin", error });
    }
  },

 // üìå Ajouter un nouveau m√©decin
async createDoctor(req, res) {
    const session = await mongoose.startSession();
    session.startTransaction();
  
    try {
      console.log("üü¢ D√©but de la cr√©ation d'un m√©decin");
      console.log("Donn√©es re√ßues :", req.body);
  
      // Extraire les donn√©es de la requ√™te
      const { firstName, lastName, email, password, badgeNumber, departement, speciality, emailPerso, phone } = req.body;
  
      // V√©rification des donn√©es requises
      if (!firstName || !lastName || !email || !password || !badgeNumber || !departement || !speciality || !emailPerso || !phone) {
        throw new Error("Donn√©es manquantes ! Veuillez v√©rifier tous les champs.");
      }
  
      console.log("‚úÖ Donn√©es utilisateur valides");
  
      // üîê Hash du mot de passe
      const hashedPassword = bcrypt.hashSync(password, 10);
  
      // 1Ô∏è‚É£ Cr√©ation et enregistrement de l'utilisateur
      const newUser = new User({ firstName, lastName, email, password: hashedPassword });
      const savedUser = await newUser.save({ session });
  
      console.log("‚úÖ Utilisateur enregistr√© :", savedUser._id);
  
      // 2Ô∏è‚É£ Cr√©ation et enregistrement du m√©decin
      const newDoctor = new Doctor({
        badgeNumber,
        departement,
        speciality,
        emailPerso,
        phone,
        user: savedUser._id,
      });
  
      const savedDoctor = await newDoctor.save({ session });
      console.log("‚úÖ M√©decin enregistr√© :", savedDoctor._id);
  
      // ‚úÖ Validation et fin de la transaction
      await session.commitTransaction();
      session.endSession();
  
      res.status(201).json({
        message: "M√©decin enregistr√© avec succ√®s",
        doctor: savedDoctor,
      });
    } catch (error) {
      // En cas d'erreur, annuler la transaction
      await session.abortTransaction();
      session.endSession();
      console.error("‚ùå Erreur lors de l'enregistrement :", error);
  
      // Retourner un message d'erreur d√©taill√©
      res.status(500).json({ 
        message: "Erreur lors de l'enregistrement", 
        error: error.message || "Une erreur inconnue est survenue" 
      });
    }
  },

  // üìå Mettre √† jour un m√©decin
  async updateDoctor(req, res) {
    try {
      const updatedDoctor = await Doctor.findByIdAndUpdate(req.params.id, req.body, { new: true });
      if (!updatedDoctor) return res.status(404).json({ message: "M√©decin non trouv√©" });
      res.json(updatedDoctor);
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la mise √† jour du m√©decin", error });
    }
  },

  // üìå Supprimer un m√©decin
  async deleteDoctor(req, res) {
    try {
      const deletedDoctor = await Doctor.findByIdAndDelete(req.params.id);
      if (!deletedDoctor) return res.status(404).json({ message: "M√©decin non trouv√©" });
      res.json({ message: "M√©decin supprim√© avec succ√®s" });
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la suppression du m√©decin", error });
    }
  },
};

module.exports = doctorController;
