const Operation = require("../models/operation");
const MedicalRecord = require("../models/medicalRecord");

const operationController = {
  // üîπ Cr√©er une op√©ration
  async createOperation(req, res) {
    try {
      const operation = new Operation(req.body);
      const savedOperation = await operation.save();
      res.status(201).json(savedOperation);
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la cr√©ation de l'op√©ration", error });
    }
  },

  // üîπ R√©cup√©rer toutes les op√©rations
  async getAllOperations(req, res) {
    try {
      const operations = await Operation.find()
        .populate("medicalRecord", "reference patient")
        .populate("patient");
      res.status(200).json(operations);
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des op√©rations", error });
    }
  },

  // üîπ R√©cup√©rer une op√©ration par ID
  async getOperationById(req, res) {
    try {
      const operation = await Operation.findById(req.params.id)
        .populate("medicalRecord", "reference patient")
        .populate("patient");

      if (!operation) return res.status(404).json({ message: "Op√©ration introuvable" });
      res.status(200).json(operation);
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de l'op√©ration", error });
    }
  },

  // üîπ Mettre √† jour une op√©ration
  async updateOperation(req, res) {
    try {
      const operation = await Operation.findByIdAndUpdate(
        req.params.id,
        { ...req.body, updateDate: new Date() },
        { new: true }
      );
      if (!operation) return res.status(404).json({ message: "Op√©ration non trouv√©e" });
      res.status(200).json(operation);
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la mise √† jour de l'op√©ration", error });
    }
  },

  // üîπ Supprimer une op√©ration
  async deleteOperation(req, res) {
    try {
      const result = await Operation.findByIdAndDelete(req.params.id);
      if (!result) return res.status(404).json({ message: "Op√©ration non trouv√©e" });
      res.status(200).json({ message: "Op√©ration supprim√©e avec succ√®s" });
    } catch (error) {
      res.status(500).json({ message: "Erreur lors de la suppression de l'op√©ration", error });
    }
  },

  // üîπ R√©cup√©rer les op√©rations par UserId
  async getOperationsByUserId(req, res) {
    try {
      const { userId } = req.params;

      // √âtape 1 : Trouver le dossier m√©dical associ√© √† cet userId
      const medicalRecord = await MedicalRecord.findOne({ "patient.user": userId });

      if (!medicalRecord) {
        return res.status(404).json({ message: "Aucun dossier m√©dical trouv√© pour cet utilisateur." });
      }

      // √âtape 2 : Trouver les op√©rations associ√©es √† ce dossier m√©dical
      const operations = await Operation.find({ medicalRecord: medicalRecord._id })
        .populate("medicalRecord", "reference patient") // Vous pouvez ajouter d'autres champs du dossier m√©dical √† afficher si n√©cessaire
        .populate("patient");

      if (!operations || operations.length === 0) {
        return res.status(404).json({ message: "Aucune op√©ration trouv√©e pour ce dossier m√©dical." });
      }

      res.status(200).json(operations);
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: "Erreur serveur", error });
    }
  }
};

module.exports = operationController;
