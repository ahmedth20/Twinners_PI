{"version":3,"file":"static/js/8841.f28a1169.chunk.js","mappings":"0IAGO,MAAMA,EAAUC,EAAAA,GAAOC,GAAG;;;;;;;;IAQ7BC,EAAAA,GAAYC;;MAEVC,EAAAA,GAAKC;;;IAGPH,EAAAA,GAAYI;;;;;;;;EASHC,EAAeP,EAAAA,GAAOQ,EAAE;;;;EAMxBC,EAAUT,EAAAA,GAAOC,GAAG;;;;;;IAM7BC,EAAAA,GAAYI;;;;IAIZJ,EAAAA,GAAYQ;;MAEVN,EAAAA,GAAKO;;EAIEC,EAAWZ,EAAAA,GAAOC,GAAG;;;;;EAOrBY,EAAUb,EAAAA,GAAOC,GAAG;IAC7BG,EAAAA,GAAKC;;;+HC1CT,MAAMS,GAAuBC,EAAAA,EAAAA,WAAAA,EAAWC,EAAAA,EAAAA,eAAcC,EAAAA,aAEhDC,EAAalB,EAAAA,GAAOC,GAAG;;;;EA4C7B,EAtCakB,IAAuC,IAAtC,QAACC,EAAO,SAAEC,EAAQ,GAAEC,EAAE,QAAEZ,GAAQS,EAC1C,MAAM,iBAACI,EAAgB,UAAEC,IAAaC,EAAAA,EAAAA,MAChCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAgBC,MAAQ,IASzC,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAX,SAEQO,GACIG,EAAAA,EAAAA,KAACb,EAAU,CAAAG,SAAEA,KAEbU,EAAAA,EAAAA,KAACjB,EAAoB,CAACmB,UAAU,iBACVb,QAASA,EACTlB,YAAa,CAACgC,GAAI,KAAMC,GAAI,KAAMC,GAAI,IAAKC,GAAI,GAC/CC,KAAM,CAACJ,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAChCE,OAAQ,CAAC,GAAI,IACbC,aAAa,EACbC,UAAyB,IAAdjB,EAAkB,IAAM,IAAmB,GAAZA,EAC1CkB,YAAanB,EACboB,WAAW,EACXC,YAAY,WACZC,kBAAkB,EAClBC,UAAU,EACVC,eAAgBrC,EAzB1BU,IACpBG,IACAG,GAASsB,EAAAA,EAAAA,IAAa,CAAC1B,KAAIF,aAC3BM,GAASuB,EAAAA,EAAAA,OACb,OAqBiFC,EAAU7B,SAC1EA,KAGd,E,yDC3BX,MA0FA,EA1FaF,IAAwD,IAAvD,MAACgC,EAAK,SAAE9B,EAAQ,SAAE+B,EAAQ,SAAEC,GAAW,EAAI,IAAEC,GAAInC,EAC3D,MAAMoC,GAAUC,EAAAA,EAAAA,QAAO,MACjBC,EAASC,OACT,MAAC5B,IAASD,EAAAA,EAAAA,KACV8B,EAAW7B,EAAQ,QAGnB,SAAC8B,IAAYC,EAAAA,EAAAA,MAEbC,EAAcF,EAASG,SAAS,aAEhCC,EAAYJ,EAASK,QAAQ,IAAK,IAElCC,GADUC,EAAAA,EAAAA,KAAYC,GAASA,EAAc,OAAEC,SAC7BL,GAQxB,OANAM,EAAAA,EAAAA,YAAU,KACFf,EAAQW,UACRX,EAAQW,QAAQK,UAAY,EAChC,GACD,CAACX,KAGAY,EAAAA,EAAAA,MAACzE,EAAO,CAAC0E,IAAKlB,EAAQlC,SAAA,EAClBU,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CAAArD,UACHU,EAAAA,EAAAA,KAAA,SAAAV,SAAQ,cAAc8B,SAE1BqB,EAAAA,EAAAA,MAAC3D,EAAO,CAAAQ,SAAA,EACJmD,EAAAA,EAAAA,MAAC/D,EAAO,CAACkE,GAAIC,EAAAA,EAAO3E,IACX4E,QAAS,CAACC,QAAS,GACnBC,YAAa,CAACD,QAAS,GACvBE,WAAY,CAACC,SAAU,IACvBC,SAAU,CAACC,MAAM,GAAM9D,SAAA,CAExBgC,IACImB,EAAAA,EAAAA,MAACjE,EAAY,CAAAc,SAAA,CACR8B,EAAM,IAAEC,GAAYE,GAAOA,EAAM,IAAKkB,EAAAA,EAAAA,MAACY,EAAAA,GAAQ,CAAA/D,SAAA,CAAC,IAAEiC,QAK3DK,IACAa,EAAAA,EAAAA,MAAC5D,EAAQ,CAAAS,SAAA,CAEDoC,EAAO4B,cACHb,EAAAA,EAAAA,MAAAxC,EAAAA,SAAA,CAAAX,SAAA,CAEQyC,IACI/B,EAAAA,EAAAA,KAACuD,EAAAA,EAAc,CAAAjE,UACXU,EAAAA,EAAAA,KAACwD,EAAAA,GAAa,OAI1BxD,EAAAA,EAAAA,KAACuD,EAAAA,EAAc,CAAAjE,UACXU,EAAAA,EAAAA,KAACyD,EAAAA,GAAiB,UAKlCzD,EAAAA,EAAAA,KAACuD,EAAAA,EAAc,CAAAjE,UACXU,EAAAA,EAAAA,KAAC0D,EAAAA,GAAe,OAEpB1D,EAAAA,EAAAA,KAACuD,EAAAA,EAAc,CAAAjE,UACXU,EAAAA,EAAAA,KAAC2D,EAAAA,GAAY,OAEjB3D,EAAAA,EAAAA,KAACuD,EAAAA,EAAc,CAAAjE,UACXU,EAAAA,EAAAA,KAAC4D,EAAAA,GAAgB,OAErB5D,EAAAA,EAAAA,KAACuD,EAAAA,EAAc,CAAAjE,UACXU,EAAAA,EAAAA,KAAC6D,EAAAA,GAAY,YAK5B1B,GAAUnC,EAAAA,EAAAA,KAAC8D,EAAI,CAACvE,GAAI0C,EAAW5C,QAAS8C,EAASxD,QAAS+C,EAAO4B,YAAYhE,SAAEA,IAAmBA,OAEjG,C,qFCrGV,MAAOyE,EAAY9F,EAAAA,GAAOC,GAAG;;;;;;EAQtB8F,EAAQ/F,EAAAA,GAAOQ,EAAE;;;;;;;;;EAWjBwF,EAAehG,EAAAA,GAAOiG,EAAE;;;;;;;EAQxBC,EAAqBlG,EAAAA,GAAOmG,EAAE;;;;;;;;EAS9BC,EAAoBpG,EAAAA,GAAOmG,EAAE;;;;;;;;EAS7BE,EAASrG,EAAAA,GAAOsG,MAAM;;;;;;;;;;;;;;;;;;;EAqBtBC,EAAQvG,EAAAA,GAAOwG,KAAK;;;;;;;;EAUpBC,EAAWzG,EAAAA,GAAO0G,QAAQ;;;;;;;;;EAW1BC,EAAkB3G,EAAAA,GAAOC,GAAG;;;;EAM5B2G,EAAS5G,EAAAA,GAAO6G,MAAM;;;;;;;;;;;;;EAgBtBC,EAAM9G,EAAAA,GAAOC,GAAG;;;;EAMhB8G,EAAS/G,EAAAA,GAAOC,GAAG;;EAInB+G,EAAehH,EAAAA,GAAO6G,MAAM;;;;;;;;;;;;EAczB7G,EAAAA,GAAOiH,IAAI,G,2DC9H7B,MAAMC,EAAaC,EAAAA,EAAEC,OAAO,CAC1BC,UAAWF,EAAAA,EAAEG,SAASC,IAAI,EAAG,0BAC7BC,SAAUL,EAAAA,EAAEG,SAASC,IAAI,EAAG,yBAC5BE,MAAON,EAAAA,EAAEG,SAASG,MAAM,yBACxBC,MAAOP,EAAAA,EAAEG,SAASC,IAAI,EAAG,qBACzBI,QAASR,EAAAA,EAAEG,SAASC,IAAI,EAAG,uBAC3BK,IAAKT,EAAAA,EAAEU,SAASC,MAAMP,IAAI,EAAG,mBAC7BQ,IAAKZ,EAAAA,EAAEG,SAASC,IAAI,EAAG,mBACvBS,OAAQb,EAAAA,EAAEU,SAASC,MAAMP,IAAI,EAAG,sBAChCU,OAAQd,EAAAA,EAAEU,SAASC,MAAMP,IAAI,EAAG,sBAChCW,cAAef,EAAAA,EAAEgB,MACfhB,EAAAA,EAAEC,OAAO,CACPgB,KAAMjB,EAAAA,EAAEG,SAASe,QAAOC,IAAQC,MAAMC,KAAKC,MAAMH,KAAO,CACtDI,QAAS,wBAEXC,OAAQxB,EAAAA,EAAEG,SAASC,IAAI,EAAG,2BAC1BqB,OAAQzB,EAAAA,EAAEG,SAASC,IAAI,EAAG,sBAC1BtC,SAAUkC,EAAAA,EAAEU,SAASN,IAAI,EAAG,wBAC5BsB,MAAO1B,EAAAA,EAAEG,SAASwB,cAEtBC,cAAe5B,EAAAA,EAAEC,OAAO,CACtB4B,WAAY7B,EAAAA,EAAEC,OAAO,CAErB,GAEA6B,UAAW9B,EAAAA,EAAEC,OAAO,CAClB8B,YAAa/B,EAAAA,EAAEgB,UAIjBgB,UAAWhC,EAAAA,EAAEgB,UAGhBiB,WAAYjC,EAAAA,EAAEgB,MACThB,EAAAA,EAAEC,OAAO,CACPiC,KAAMlC,EAAAA,EAAEG,SAASC,IAAI,EAAG,8BACxB+B,cAAenC,EAAAA,EAAEU,SAASN,IAAI,EAAG,8BACjCa,KAAMjB,EAAAA,EAAEG,SAASe,QAAOC,IAAQC,MAAMC,KAAKC,MAAMH,KAAO,CACtDI,QAAS,wBAEXa,WAAYpC,EAAAA,EAAEG,SAASC,IAAI,EAAG,2BAC9BqB,OAAQzB,EAAAA,EAAEG,SAASC,IAAI,EAAG,2BAQ5BiC,EAAcrI,IAAA,IAAC,MAAEgC,EAAK,SAAE9B,GAAUF,EAAA,OACtCqD,EAAAA,EAAAA,MAAA,OAAAnD,SAAA,EACEU,EAAAA,EAAAA,KAACiE,EAAY,CAAA3E,SAAE8B,IACd9B,IACG,EAkcR,EA/boBoI,KAClB,MAAM,SAAEC,EAAQ,aAAEC,EAAcC,WAAW,OAAEC,GAAQ,MAAEC,EAAK,SAAEC,IAAaC,EAAAA,EAAAA,IAAQ,CACjFC,UAAUC,EAAAA,EAAAA,GAAYhD,GACtBiD,cAAe,CACbjC,cAAe,GACfa,cAAe,CACbC,WAAY,CACVoB,UAAW,GACXC,SAAU,GACVC,SAAU,CAACC,QACX1B,MAAO,IAETI,UAAW,CACTC,YAAa,IAEfC,UAAW,GACXC,WAAW,QAMVkB,EAAUE,IAAeC,EAAAA,EAAAA,UAAS,CAAC,MACnCvB,EAAawB,IAAkBD,EAAAA,EAAAA,UAAS,CAAC,CAAEE,KAAM,GAAIC,OAAQ,GAAIC,UAAW,GAAI5F,SAAU,GAAI4D,MAAO,OACrGiC,EAA0BC,IAA+BN,EAAAA,EAAAA,UAAS,CAAC,MACnEtB,EAAW6B,IAAgBP,EAAAA,EAAAA,UAAS,CAAC,MACrCrB,EAAY6B,IAAiBR,EAAAA,EAAAA,UAAS,CAAC,CAAEpB,KAAM,GAAIC,cAAe,GAAIlB,KAAM,GAAImB,WAAY,GAAIX,OAAQ,OACxGsC,EAASC,IAAcV,EAAAA,EAAAA,UAAS,IAGjCW,EAAYC,GAAaA,GAASC,GAAQ,IAAIA,EAAM,MAMpDC,EAAcA,CAACF,EAAUG,IAAUH,GAAUC,GAASA,EAAKG,QAAO,CAACC,EAAGC,IAAMA,IAAMH,OAM1FlH,EAAAA,EAAAA,YAAU,KACiBsH,WACjB,IACI,MAAMC,QAAaC,EAAAA,EAAeC,gBAClCZ,EAAWU,GAEXG,QAAQC,IAAI,qBACZD,QAAQC,IAAIJ,EAChB,CAAE,MAAOK,GACLF,QAAQE,MAAM,0BAA2BA,EAC7C,GAEJC,EAAc,GACf,IA+CH,OACEpK,EAAAA,EAAAA,KAACqK,EAAAA,EAAI,CAACjJ,MAAM,iBAAgB9B,UAC1BmD,EAAAA,EAAAA,MAACsB,EAAS,CAAAzE,SAAA,EACRU,EAAAA,EAAAA,KAACgE,EAAK,CAAA1E,SAAC,yBAGPmD,EAAAA,EAAAA,MAACgF,EAAW,CAACrG,MAAM,mBAAkB9B,SAAA,EACnCmD,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,aAAc2C,YAAY,aAAahD,KAAK,SAC/DQ,EAAOxC,YAAatF,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOxC,UAAUqB,UAAa,SAEzDlE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,YAAa2C,YAAY,YAAYhD,KAAK,SAC7DQ,EAAOrC,WAAYzF,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOrC,SAASkB,UAAa,YAGzD3G,EAAAA,EAAAA,KAAC+E,EAAG,CAAAzF,UACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,SAAU2C,YAAY,QAAQhD,KAAK,UACtDQ,EAAOpC,QAAS1F,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOpC,MAAMiB,UAAa,cAOrDlE,EAAAA,EAAAA,MAACgF,EAAW,CAACrG,MAAM,sBAAqB9B,SAAA,EACtCmD,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,SAAU2C,YAAY,QAAQhD,KAAK,QACtDQ,EAAOnC,QAAS3F,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOnC,MAAMgB,UAAa,SAEjDlE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,WAAY2C,YAAY,UAAUhD,KAAK,SAC1DQ,EAAOlC,UAAW5F,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOlC,QAAQe,UAAa,YAGvDlE,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACJmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACfU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,MAAO,CAClB4C,WAAaC,GAAUC,OAAOD,KAEhCF,YAAY,MACZhD,KAAK,WAENQ,EAAOjC,MAAO7F,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOjC,IAAIc,UAAa,QAGjClE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLmD,EAAAA,EAAAA,MAAC6B,EAAM,IAAKqD,EAAS,OAAMrI,SAAA,EACzBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,GAAElL,SAAC,gBACjBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,SAAQlL,SAAC,YACvBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,OAAMlL,SAAC,YAEtBwI,EAAO9B,MAAOhG,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAO9B,IAAIW,UAAa,YAG/ClE,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACZmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,SAAU,CACrB4C,WAAaC,GAAUC,OAAOD,KAEhCF,YAAY,cACZhD,KAAK,WAENQ,EAAO7B,SAAUjG,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAO7B,OAAOU,UAAa,QAEnDlE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,SAAU,CACrB4C,WAAaC,GAAUC,OAAOD,KAEhCF,YAAY,cACZhD,KAAK,WAENQ,EAAO5B,SAAUlG,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAO5B,OAAOS,UAAa,cAM7ClE,EAAAA,EAAAA,MAACgF,EAAW,CAACrG,MAAM,eAAc9B,SAAA,EAC/BmD,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACJmD,EAAAA,EAAAA,MAAC6B,EAAM,IAAKqD,EAAS,SAAU,CAAE+C,SAAU,wCAAqCpL,SAAA,EAC1EU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,GAAElL,SAAC,+BAChB6J,EAAQwB,KAAK/D,IACVnE,EAAAA,EAAAA,MAAA,UAAyB+H,MAAO5D,EAAOgE,IAAItL,SAAA,CACtCsH,EAAOiE,KAAKvF,UAAU,IAAEsB,EAAOiE,KAAKpF,WAD5BmB,EAAOgE,UAM3B9C,EAAOlB,SAAU5G,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOlB,OAAOD,cAEtClE,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,YAAa2C,YAAY,qBAAqBhD,KAAK,WACtEQ,EAAO5E,WAAYlD,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAO5E,SAASyD,cAE1ClE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,QAAS2C,YAAY,OAAOhD,KAAK,SACpDQ,EAAOzB,OAAQrG,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOzB,KAAKM,iBAGpC3G,EAAAA,EAAAA,KAAC+E,EAAG,CAAAzF,UACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLmD,EAAAA,EAAAA,MAAC6B,EAAM,IAAKqD,EAAS,UAASrI,SAAA,EAC5BU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,GAAElL,SAAC,mBACjBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,UAASlL,SAAC,aACxBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,UAASlL,SAAC,aACxBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,YAAWlL,SAAC,eAC1BU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,YAAWlL,SAAC,iBAE3BwI,EAAOjB,SAAU7G,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOjB,OAAOF,mBAI1ClE,EAAAA,EAAAA,MAACgF,EAAW,CAACrG,MAAM,iBAAgB9B,SAAA,EACzCU,EAAAA,EAAAA,KAACmE,EAAkB,CAAA7E,SAAC,iBACpBmD,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,aAAc2C,YAAY,YAAYhD,KAAK,SAC9DQ,EAAOO,YAAarI,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOO,UAAU1B,cAE5ClE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IAAKmD,EAAS,YAAa2C,YAAY,WAAWhD,KAAK,SAC5DQ,EAAOQ,WAAYtI,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOQ,SAAS3B,gBAI3C4B,EAASoC,KAAI,CAACG,EAASrB,KAAK,IAAAsB,EAAA,OAC3BtI,EAAAA,EAAAA,MAAA,OAAiBuI,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAAW5L,SAAA,EAChEU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,YAAY8B,KACzBa,YAAY,UACZE,MAAOM,EACPK,SAAWC,IACT,MAAMC,EAAc,IAAI9C,GACxB8C,EAAY5B,GAAS2B,EAAEE,OAAOd,MAC9B/B,EAAY4C,EAAY,IAG3B5B,EAAQ,IAAKzJ,EAAAA,EAAAA,KAACiF,EAAY,CAACsG,QAASA,IAAM/B,EAAYf,EAAagB,GAAOnK,SAAC,MAC3EwI,EAAOS,UAAYT,EAAOS,SAASkB,KAAUzJ,EAAAA,EAAAA,KAAA,KAAAV,SAA0B,QAA1ByL,EAAIjD,EAAOS,SAASkB,UAAM,IAAAsB,OAAA,EAAtBA,EAAwBpE,YAZlE8C,EAaJ,KAERzJ,EAAAA,EAAAA,KAAC4E,EAAe,CAAAtF,UAACU,EAAAA,EAAAA,KAAC6E,EAAM,CAAC0G,QAASA,IAAMlC,EAASZ,GAAanJ,SAAC,yBAE/DU,EAAAA,EAAAA,KAACqE,EAAiB,CAAA/E,SAAC,gBAClB6H,EAAYwD,KAAI,CAACa,EAAY/B,KAAK,IAAAgC,EAAAC,EAAAC,EAAAC,EAAA,OACjCnJ,EAAAA,EAAAA,MAAA,OAAAnD,SAAA,EACEmD,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,eAAe8B,UAC5Ba,YAAY,kBACZE,MAAOgB,EAAW5C,KAClBuC,SAAWC,IACT,MAAMS,EAAiB,IAAI1E,GAC3B0E,EAAepC,GAAOb,KAAOwC,EAAEE,OAAOd,MACtC7B,EAAekD,EAAe,IAGjC/D,EAAOX,cAAwC,QAA7BsE,EAAI3D,EAAOX,YAAYsC,UAAM,IAAAgC,OAAA,EAAzBA,EAA2B7C,QAAQ5I,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOX,YAAYsC,GAAOb,KAAKjC,cAE/FlE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,eAAe8B,YAC5Ba,YAAY,SACZE,MAAOgB,EAAW3C,OAClBsC,SAAWC,IACT,MAAMS,EAAiB,IAAI1E,GAC3B0E,EAAepC,GAAOZ,OAASuC,EAAEE,OAAOd,MACxC7B,EAAekD,EAAe,IAGjC/D,EAAOX,cAAwC,QAA7BuE,EAAI5D,EAAOX,YAAYsC,UAAM,IAAAiC,OAAA,EAAzBA,EAA2B7C,UAAU7I,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOX,YAAYsC,GAAOZ,OAAOlC,iBAGrGlE,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,eAAe8B,eAC5Ba,YAAY,YACZE,MAAOgB,EAAW1C,UAClBqC,SAAWC,IACT,MAAMS,EAAiB,IAAI1E,GAC3B0E,EAAepC,GAAOX,UAAYsC,EAAEE,OAAOd,MAC3C7B,EAAekD,EAAe,IAGjC/D,EAAOX,cAAwC,QAA7BwE,EAAI7D,EAAOX,YAAYsC,UAAM,IAAAkC,OAAA,EAAzBA,EAA2B7C,aAAa9I,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOX,YAAYsC,GAAOX,UAAUnC,cAEzGlE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,eAAe8B,cAC5Ba,YAAY,WACZE,MAAOgB,EAAWtI,SAClBiI,SAAWC,IACT,MAAMS,EAAiB,IAAI1E,GAC3B0E,EAAepC,GAAOvG,SAAWkI,EAAEE,OAAOd,MAC1C7B,EAAekD,EAAe,IAGjC/D,EAAOX,cAAwC,QAA7ByE,EAAI9D,EAAOX,YAAYsC,UAAM,IAAAmC,OAAA,EAAzBA,EAA2B1I,YAAYlD,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOX,YAAYsC,GAAOvG,SAASyD,iBAGzG3G,EAAAA,EAAAA,KAAC+E,EAAG,CAAAzF,UACFU,EAAAA,EAAAA,KAACgF,EAAM,CAAA1F,UACLU,EAAAA,EAAAA,KAAC0E,EAAQ,IACHiD,EAAS,eAAe8B,WAC5Ba,YAAY,QACZE,MAAOgB,EAAW1E,MAClBqE,SAAWC,IACT,MAAMS,EAAiB,IAAI1E,GAC3B0E,EAAepC,GAAO3C,MAAQsE,EAAEE,OAAOd,MACvC7B,EAAekD,EAAe,QAKrCpC,EAAQ,IAAKzJ,EAAAA,EAAAA,KAACiF,EAAY,CAACsG,QAASA,IAjSf9B,IAAUd,EAAexB,EAAYuC,QAAO,CAACC,EAAGC,IAAMA,IAAMH,KAiSvCqC,CAAiBrC,GAAOnK,SAAC,wBAvE5DmK,EAwEJ,KAERzJ,EAAAA,EAAAA,KAAC4E,EAAe,CAAAtF,UAACU,EAAAA,EAAAA,KAAC6E,EAAM,CAAC0G,QA1SHQ,IAAMpD,GAAeY,GAAQ,IAAIA,EAAM,CAAEX,KAAM,GAAIC,OAAQ,GAAIC,UAAW,GAAI5F,SAAU,GAAI4D,MAAO,OA0SzExH,SAAC,sBAEjDU,EAAAA,EAAAA,KAACqE,EAAiB,CAAA/E,SAAC,cAClB8H,EAAUuD,KAAI,CAACqB,EAASvC,KAAK,IAAAwC,EAAA,OAC5BxJ,EAAAA,EAAAA,MAAA,OAAAnD,SAAA,EACEU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,aAAa8B,KAC1Ba,YAAY,UACZE,MAAOwB,EACPb,SAAWC,IACT,MAAMc,EAAe,IAAI9E,GACzB8E,EAAazC,GAAS2B,EAAEE,OAAOd,MAC/BvB,EAAaiD,EAAa,IAG7BpE,EAAOV,WAAaU,EAAOV,UAAUqC,KAAUzJ,EAAAA,EAAAA,KAAA,KAAAV,SAA2B,QAA3B2M,EAAInE,EAAOV,UAAUqC,UAAM,IAAAwC,OAAA,EAAvBA,EAAyBtF,UAC5E8C,EAAQ,IAAKzJ,EAAAA,EAAAA,KAACiF,EAAY,CAACsG,QAASA,IAAM/B,EAAYP,EAAcQ,GAAOnK,SAAC,QAZrEmK,EAaJ,KAERzJ,EAAAA,EAAAA,KAAC4E,EAAe,CAAAtF,UAACU,EAAAA,EAAAA,KAAC6E,EAAM,CAAC0G,QAASA,IAAMlC,EAASJ,GAAc3J,SAAC,mBAGxDU,EAAAA,EAAAA,KAACqE,EAAiB,CAAA/E,SAAC,eAClB+H,EAAWsD,KAAI,CAACwB,EAAW1C,KAAK,IAAA2C,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAC/B/J,EAAAA,EAAAA,MAAA,OAAAnD,SAAA,EACEmD,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,cAAc8B,UAC3Ba,YAAY,iBACZE,MAAO2B,EAAU7E,KACjB6D,SAAWC,IACT,MAAMqB,EAAgB,IAAIpF,GAC1BoF,EAAchD,GAAOnC,KAAO8D,EAAEE,OAAOd,MACrCtB,EAAcuD,EAAc,IAG/B3E,EAAOT,aAAsC,QAA5B+E,EAAItE,EAAOT,WAAWoC,UAAM,IAAA2C,OAAA,EAAxBA,EAA0B9E,QAAQtH,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOT,WAAWoC,GAAOnC,KAAKX,cAE5FlE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACPU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,cAAc8B,kBAAuB,CAAEiD,eAAe,IACnEpC,YAAY,iBACZE,MAAO2B,EAAU5E,cACjB4D,SAAWC,IACT,MAAMqB,EAAgB,IAAIpF,GAC1BoF,EAAchD,GAAOlC,cAAgBkD,OAAOW,EAAEE,OAAOd,QAAU,EAC/DtB,EAAcuD,EAAc,IAG/B3E,EAAOT,aAAsC,QAA5BgF,EAAIvE,EAAOT,WAAWoC,UAAM,IAAA4C,OAAA,EAAxBA,EAA0B9E,iBAC9CvH,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOT,WAAWoC,GAAOlC,cAAcZ,iBAK/ClE,EAAAA,EAAAA,MAACsC,EAAG,CAAAzF,SAAA,EACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,cAAc8B,UAC3Ba,YAAY,iBACZE,MAAO2B,EAAU9F,KACjBiB,KAAK,OACL6D,SAAWC,IACT,MAAMqB,EAAgB,IAAIpF,GAC1BoF,EAAchD,GAAOpD,KAAO+E,EAAEE,OAAOd,MACrCtB,EAAcuD,EAAc,IAG/B3E,EAAOT,aAAsC,QAA5BiF,EAAIxE,EAAOT,WAAWoC,UAAM,IAAA6C,OAAA,EAAxBA,EAA0BjG,QAAQrG,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOT,WAAWoC,GAAOpD,KAAKM,cAE5FlE,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLU,EAAAA,EAAAA,KAACwE,EAAK,IACAmD,EAAS,cAAc8B,gBAC3Ba,YAAY,cACZE,MAAO2B,EAAU3E,WACjB2D,SAAWC,IACT,MAAMqB,EAAgB,IAAIpF,GAC1BoF,EAAchD,GAAOjC,WAAa4D,EAAEE,OAAOd,MAC3CtB,EAAcuD,EAAc,IAG/B3E,EAAOT,aAAsC,QAA5BkF,EAAIzE,EAAOT,WAAWoC,UAAM,IAAA8C,OAAA,EAAxBA,EAA0B/E,cAAcxH,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOT,WAAWoC,GAAOjC,WAAWb,iBAG1G3G,EAAAA,EAAAA,KAAC+E,EAAG,CAAAzF,UACFmD,EAAAA,EAAAA,MAACuC,EAAM,CAAA1F,SAAA,EACLmD,EAAAA,EAAAA,MAAC6B,EAAM,IACDqD,EAAS,cAAc8B,YAC3Be,MAAO2B,EAAUtF,OACjBsE,SAAWC,IACT,MAAMqB,EAAgB,IAAIpF,GAC1BoF,EAAchD,GAAO5C,OAASuE,EAAEE,OAAOd,MACvCtB,EAAcuD,EAAc,EAC5BnN,SAAA,EAEFU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,GAAElL,SAAC,mBACjBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,YAAWlL,SAAC,eAC1BU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,UAASlL,SAAC,aACxBU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,YAAWlL,SAAC,eAC1BU,EAAAA,EAAAA,KAAA,UAAQwK,MAAM,YAAWlL,SAAC,iBAE3BwI,EAAOT,aAAsC,QAA5BmF,EAAI1E,EAAOT,WAAWoC,UAAM,IAAA+C,OAAA,EAAxBA,EAA0B3F,UAAU7G,EAAAA,EAAAA,KAAA,KAAAV,SAAIwI,EAAOT,WAAWoC,GAAO5C,OAAOF,eAGjG8C,EAAQ,IAAKzJ,EAAAA,EAAAA,KAACiF,EAAY,CAACsG,QAASA,IA5YxB9B,KACvBP,EAAc7B,EAAWqC,QAAO,CAACC,EAAGC,IAAMA,IAAMH,IAAO,EA2YFkD,CAAgBlD,GAAOnK,SAAC,uBAjF3DmK,EAkFJ,KAERzJ,EAAAA,EAAAA,KAAC4E,EAAe,CAAAtF,UAACU,EAAAA,EAAAA,KAAC6E,EAAM,CAAC0G,QArZZqB,IAAM1D,GAAcK,GAAQ,IAAIA,EAAM,CAAEjC,KAAM,GAAIC,cAAe,GAAIlB,KAAM,GAAImB,WAAY,GAAIX,OAAQ,OAqZrEvH,SAAC,wBAGlDU,EAAAA,EAAAA,KAAC6E,EAAM,CAAC0G,QAAS3D,GAhYNiC,UACf,IAEE,MAAMgD,EAAkB,CACtBjG,OAAQmB,EAAM,UACf7E,SAAUuH,OAAO1C,EAAM,aACtB1B,KAAM0B,EAAM,QACZlB,OAAQkB,EAAM,UACdjB,MAAOiB,EAAM,UAAY,IAIrB+E,EAAmB,CACvB7F,WAAY,CACVoB,UAAWN,EAAM,aACjBO,SAAUP,EAAM,YAChBQ,SAAUwE,MAAMC,QAAQjF,EAAM,aAAeA,EAAM,YAAc,GACjEjB,MAAOiB,EAAM,qBAAuB,IAEtCb,UAAW,CACTC,YAAaY,EAAM,gBAErBX,UAAWW,EAAM,cAIbkF,EAAc,IACfnD,EACH3D,cAAe,IAAI2D,EAAK3D,cAAe0G,GACvC7F,cAAe8F,GAGjB7C,QAAQC,IAAI,2BAAsB+C,SAG5BlD,EAAAA,EAAemD,cAAcD,GAEnCE,MAAM,4CACR,CAAE,MAAOhD,GAAQ,IAADiD,EAAAC,EACd,MAAMC,GAA6B,QAAdF,EAAAjD,EAAMoD,gBAAQ,IAAAH,GAAM,QAANC,EAAdD,EAAgBtD,YAAI,IAAAuD,OAAN,EAAdA,EAAsB1G,UAAWwD,EAAMxD,SAAW,mBACvEwG,MAAM,UAAKG,KACXrD,QAAQE,MAAM,2BAAyBA,EACzC,KAsV4C7K,SAAC,eAGtC,C,kDC1fX,MAAMkO,EAAU,gCAkGhB,EAhGuB,CACtBC,eAAgB5D,UACb,IAEK,aADsB6D,EAAAA,EAAMC,IAAIH,IAChB1D,IACrB,CAAE,MAAOK,GAEH,MADAF,QAAQE,MAAM,0CAA2CA,GACnDA,CACZ,GAGFyD,eAAgB/D,UACd,IAEE,aADuB6D,EAAAA,EAAMC,IAAI,GAAGH,KAAWjO,MAC/BuK,IAClB,CAAE,MAAOK,GAEP,MADAF,QAAQE,MAAM,mDAA8CA,GACtDA,CACR,GAEF0D,mBAAoBhE,UAClB,IAEE,aADuB6D,EAAAA,EAAMC,IAAI,GAAGH,aAAmBjO,MACvCuK,IAClB,CAAE,MAAOK,GAEP,MADAF,QAAQE,MAAM,mDAA8CA,GACtDA,CACR,GAEF+C,cAAerD,UACb,IAEE,aADuB6D,EAAAA,EAAMI,KAAKN,EAASO,IAC3BjE,IAClB,CAAE,MAAOK,GAEP,MADAF,QAAQE,MAAM,4CAA0CA,GAClDA,CACR,GAEF6D,oBAAqBnE,UACnB,IAEE,aADuB6D,EAAAA,EAAMI,KAAK,GAAGN,wBAA+BO,IACpDjE,IAClB,CAAE,MAAOK,GAEP,MADAF,QAAQE,MAAM,4CAA0CA,GAClDA,CACR,GAEF8D,oBAAqBpE,MAAOtK,EAAIwO,KAC9B,IAEE,aADuBL,EAAAA,EAAMQ,IAAI,GAAGV,yBAA+BjO,IAAMwO,IACzDjE,IAClB,CAAE,MAAOK,GAEP,MADAF,QAAQE,MAAM,+CAA6CA,GACrDA,CACR,GAEFgE,cAAetE,MAAOtK,EAAIwO,KACxB,IAEE,aADuBL,EAAAA,EAAMQ,IAAI,GAAGV,KAAWjO,IAAMwO,IACrCjE,IAClB,CAAE,MAAOK,GAEP,MADAF,QAAQE,MAAM,+CAA6CA,GACrDA,CACR,GAEFiE,cAAevE,UACb,UACQ6D,EAAAA,EAAMW,OAAO,GAAGb,KAAWjO,IACnC,CAAE,MAAO4K,GAEP,MADAF,QAAQE,MAAM,4CAA6CA,GACrDA,CACR,GAGFmE,iBAAkBzE,UAChB,IACEI,QAAQC,IAAI,2BAAsB3K,GAElC,aADuBmO,EAAAA,EAAMQ,IAAI,GAAGV,mBAAyBjO,IAAM,CAAC,EAAG,CAAEgP,iBAAiB,GAE5F,CAAE,MAAOpE,GAEP,MADAF,QAAQE,MAAM,8DAA4DA,GACpEA,CACR,GAEFH,cAAeH,UACb,IAEK,aADsB6D,EAAAA,EAAMC,IAAI,GAAGH,kBACnB1D,IACrB,CAAE,MAAOK,GAEH,MADAF,QAAQE,MAAM,yCAA0CA,GAClDA,CACZ,G","sources":["layout/Page/style.js","layout/Grid/index.jsx","layout/Page/index.jsx","styles/medicalForm.js","pages/MedicalForm.jsx","services/PatientService.js"],"sourcesContent":["import styled from 'styled-components';\r\nimport {breakpoints, flex} from 'styles/vars';\r\n\r\nexport const Content = styled.div`\r\n  padding: 20px 20px 84px;\r\n  flex-grow: 1;\r\n  height: auto;\r\n  width: 100%;\r\n  display: flex;\r\n  margin-top: var(--header-height);\r\n\r\n  ${breakpoints.tablet} {\r\n    padding: 20px 30px 30px;\r\n    ${flex.col};\r\n  }\r\n\r\n  ${breakpoints.laptopL} {\r\n    padding: 0;\r\n    margin-top: 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) and (min-height: 800px) {\r\n    overflow: hidden;\r\n  }\r\n`\r\nexport const ContentTitle = styled.h1`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 18px;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n\r\n  ${breakpoints.laptopL} {\r\n    margin-top: 40px;\r\n  }\r\n\r\n  ${breakpoints.desktop} {\r\n    flex-direction: row;\r\n    ${flex.between};\r\n  }\r\n`\r\n\r\nexport const Controls = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  padding-right: 16px;\r\n`\r\n\r\nexport const Widgets = styled.div`\r\n  ${flex.col};\r\n  width: 100%;\r\n  flex-grow: 1;\r\n`","// styling\r\nimport styled from 'styled-components';\r\n\r\n// components\r\nimport {Responsive, WidthProvider} from 'react-grid-layout';\r\nimport {withSize} from 'react-sizeme';\r\n\r\n// hooks\r\nimport {useInterfaceContext} from 'contexts/interfaceContext';\r\nimport {useDispatch} from 'react-redux';\r\nimport {updateLayout, saveToLocalStorage} from 'store/features/layout';\r\nimport useWindowSize from 'hooks/useWindowSize';\r\n\r\nconst ResponsiveGridLayout = withSize()(WidthProvider(Responsive));\r\n\r\nconst StaticGrid = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n`;\r\n\r\nconst Grid = ({layouts, children, id, desktop}) => {\r\n    const {isLayoutEditable, fontScale} = useInterfaceContext();\r\n    const dispatch = useDispatch();\r\n    const isMobile = useWindowSize().width < 768;\r\n\r\n    const handleLayoutChange = (layouts) => {\r\n        if (isLayoutEditable) {\r\n            dispatch(updateLayout({id, layouts}));\r\n            dispatch(saveToLocalStorage());\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isMobile ?\r\n                    <StaticGrid>{children}</StaticGrid>\r\n                    :\r\n                    <ResponsiveGridLayout className=\"content_layout\"\r\n                                          layouts={layouts}\r\n                                          breakpoints={{xl: 1026, lg: 1039, md: 708, sm: 0}}\r\n                                          cols={{xl: 3, lg: 3, md: 2, sm: 1}}\r\n                                          margin={[24, 24]}\r\n                                          isResizable={false}\r\n                                          rowHeight={fontScale === 1 ? 182 : 182 + (fontScale * 11)}\r\n                                          isDraggable={isLayoutEditable}\r\n                                          isBounded={true}\r\n                                          compactType=\"vertical\"\r\n                                          useCSSTransforms={false}\r\n                                          autoSize={true}\r\n                                          onLayoutChange={desktop ? handleLayoutChange : undefined}>\r\n                        {children}\r\n                    </ResponsiveGridLayout>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Grid;","// styled components\r\nimport {Content, ContentTitle, Controls, Wrapper, Widgets} from './style';\r\nimport {QtyBadge} from 'UI/Badge/style';\r\nimport {ControlWrapper} from 'components/GlobalSettingsControls/style';\r\n\r\n// components\r\nimport {Helmet} from 'react-helmet';\r\nimport {\r\n    ContrastControl,\r\n    FullscreenControl,\r\n    LayoutControl,\r\n    ScaleControl,\r\n    ThemeControl,\r\n    DirectionControl\r\n} from 'components/GlobalSettingsControls';\r\nimport Grid from 'layout/Grid';\r\nimport {motion} from 'framer-motion';\r\n\r\n// utils\r\nimport PropTypes from 'prop-types';\r\n\r\n// hooks\r\nimport useWindowSize from 'hooks/useWindowSize';\r\nimport useMobileDetect from 'use-mobile-detect-hook';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {useRef, useEffect} from 'react';\r\n\r\nconst Page = ({title, children, hasBadge, hasTitle = true, qty}) => {\r\n    const pageRef = useRef(null);\r\n    const device = useMobileDetect();\r\n    const {width} = useWindowSize();\r\n    const isTablet = width > 767.98;\r\n\r\n    // get the current location from the router\r\n    const {pathname} = useLocation();\r\n    // detect if the current location is dashboard\r\n    const isDashboard = pathname.includes('dashboard');\r\n    // modify the path to get corresponding layout from the store\r\n    const layoutKey = pathname.replace('/', '');\r\n    const layouts = useSelector(state => state['layout'].layout);\r\n    const current = layouts[layoutKey];\r\n\r\n    useEffect(() => {\r\n        if (pageRef.current) {\r\n            pageRef.current.scrollTop = 0;\r\n        }\r\n    }, [pathname]);\r\n\r\n    return (\r\n        <Content ref={pageRef}>\r\n            <Helmet>\r\n                <title>{`Smart190 | ${title}`}</title>\r\n            </Helmet>\r\n            <Widgets>\r\n                <Wrapper as={motion.div}\r\n                         initial={{opacity: 0}}\r\n                         whileInView={{opacity: 1}}\r\n                         transition={{duration: .4}}\r\n                         viewport={{once: true}}>\r\n                    {\r\n                        hasTitle && (\r\n                            <ContentTitle>\r\n                                {title} {hasBadge && qty && qty > 0 && <QtyBadge>+{qty}</QtyBadge>}\r\n                            </ContentTitle>\r\n                        )\r\n                    }\r\n                    {\r\n                        isTablet &&\r\n                        <Controls>\r\n                            {\r\n                                device.isDesktop() && (\r\n                                    <>\r\n                                        {\r\n                                            isDashboard && (\r\n                                                <ControlWrapper>\r\n                                                    <LayoutControl/>\r\n                                                </ControlWrapper>\r\n                                            )\r\n                                        }\r\n                                        <ControlWrapper>\r\n                                            <FullscreenControl/>\r\n                                        </ControlWrapper>\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <ControlWrapper>\r\n                                <ContrastControl/>\r\n                            </ControlWrapper>\r\n                            <ControlWrapper>\r\n                                <ThemeControl/>\r\n                            </ControlWrapper>\r\n                            <ControlWrapper>\r\n                                <DirectionControl/>\r\n                            </ControlWrapper>\r\n                            <ControlWrapper>\r\n                                <ScaleControl/>\r\n                            </ControlWrapper>\r\n                        </Controls>\r\n                    }\r\n                </Wrapper>\r\n                {current ? <Grid id={layoutKey} layouts={current} desktop={device.isDesktop()}>{children}</Grid> : children}\r\n            </Widgets>\r\n        </Content>\r\n    )\r\n}\r\n\r\nPage.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ]).isRequired,\r\n    hasBadge: PropTypes.bool,\r\n    hasTitle: PropTypes.bool,\r\n    qty: PropTypes.number,\r\n}\r\n\r\nexport default Page;","import styled from \"styled-components\";\r\n\r\nexport  const  Container = styled.div`\r\n  border-radius: 15px;\r\n  background: #fff;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  padding: 40px;\r\n\r\n`;\r\n\r\nexport  const  Title = styled.h1`\r\n  color: #414d55;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n   justify-content: center;\r\n  align-items: center;\r\n  margin-left:10px;\r\n`;\r\n\r\nexport  const  SectionTitle = styled.h3`\r\n  font-weight: bold;\r\n  color: #cc0000;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  border-bottom: 2px solid #cc0000;\r\n  padding-bottom: 5px;\r\n`;\r\nexport  const  SectionSecondTitle = styled.h4`\r\n  font-weight: bold;\r\n  color:rgba(204, 0, 0, 0.8);\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  margin-left: 20px;\r\n  border-bottom: 2px solid rgba(204, 0, 0, 0.8);\r\n  padding-bottom: 5px;\r\n`;\r\nexport  const  SectionThirdTitle = styled.h4`\r\n  font-weight: bold;\r\n  color:rgba(204, 0, 0, 0.69);\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  margin-left: 30px;\r\n  border-bottom: 2px solid rgba(204, 0, 0, 0.69);\r\n  padding-bottom: 5px;\r\n`;\r\nexport  const  Select = styled.select`\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 2px solid #ddd;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  background: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  appearance: none;\r\n  color:rgba(65, 77, 85, 0.79);\r\n  &:hover {\r\n    border-color: #cc0000;\r\n  }\r\n\r\n  &:focus {\r\n    border-color:rgb(114, 21, 21);\r\n    box-shadow: 0 0 5px rgba(44, 97, 226, 0.5);\r\n  }\r\n`;\r\n\r\nexport  const  Input = styled.input`\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 2px solid #ddd;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  outline: none;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport  const  TextArea = styled.textarea`\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 2px solid #ddd;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  outline: none;\r\n  min-height: 80px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport  const  ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n`;\r\n\r\nexport  const  Button = styled.button`\r\n  padding: 10px 15px;\r\n  border: none;\r\n  background:#cc0000;\r\n  color: white;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n\r\n  &:hover {\r\n    background:rgb(120, 11, 11);\r\n  }\r\n`;\r\n\r\n\r\nexport  const  Row = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 10px;\r\n`;\r\n\r\nexport  const  Column = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport  const  RemoveButton = styled.button`\r\n  background: #ff4d4d;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  border-radius: 5px;\r\n  margin-left: 10px;\r\n  &:hover {\r\n    background: #cc0000;\r\n  }\r\n`;\r\n\r\nexport const Form=styled.form``;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Page from \"layout/Page\";\r\nimport { Container, Title, SectionTitle,Form, SectionSecondTitle, SectionThirdTitle, Select, Input, TextArea, ButtonContainer, Button, Row, Column, RemoveButton } from \"../styles/medicalForm\";\r\nimport PatientService from \"../services/PatientService\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";  // <-- Ajout de l'import\r\nimport { z } from \"zod\";\r\n\r\n// Définition du schéma Zod\r\nconst formSchema = z.object({\r\n  firstName: z.string().min(1, \"First Name is required\"),\r\n  lastName: z.string().min(1, \"Last Name is required\"),\r\n  email: z.string().email(\"Invalid email address\"),\r\n  phone: z.string().min(1, \"Phone is required\"),\r\n  address: z.string().min(1, \"Address is required\"),\r\n  age: z.number().int().min(1, \"Age is required\"),\r\n  sex: z.string().min(1, \"Sex is required\"),\r\n  height: z.number().int().min(1, \"Height is required\"),\r\n  weight: z.number().int().min(1, \"Weight is required\"),\r\n  consultations: z.array(\r\n    z.object({\r\n      date: z.string().refine(val => !isNaN(Date.parse(val)), {\r\n        message: \"Invalid date format\",\r\n      }),\r\n      doctor: z.string().min(1, \"Doctor's ID is required\"), // Indiqué comme un ID\r\n      status: z.string().min(1, \"Status is required\"), // Ajouté car présent dans les données JSON\r\n      duration: z.number().min(1, \"Duration is required\"), // Ajouté car présent dans les données JSON\r\n      notes: z.string().optional(),\r\n    })),\r\n  medicalRecord: z.object({\r\n    diagnostic: z.object({\r\n      \r\n    }),\r\n\r\n    treatment: z.object({\r\n      medications: z.array(\r\n       \r\n      ),\r\n    }),\r\n    allergies: z.array(),\r\n   \r\n  }),\r\n operations: z.array(\r\n      z.object({\r\n        type: z.string().min(1, \"Operation type is required\"),\r\n        estimatedTime: z.number().min(1, \"Estimated time is required\"), // Corrigé en number\r\n        date: z.string().refine(val => !isNaN(Date.parse(val)), {\r\n          message: \"Invalid date format\",\r\n        }),\r\n        roomNumber: z.string().min(1, \"Room number is required\"),\r\n        status: z.string().min(1, \"Status is required\"),\r\n      })\r\n    ),\r\n  \r\n  \r\n});\r\n\r\n\r\nconst FormSection = ({ title, children }) => (\r\n  <div>\r\n    <SectionTitle>{title}</SectionTitle>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst MedicalForm = () => {\r\n  const { register, handleSubmit, formState: { errors }, watch, setValue } = useForm({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      consultations: [],  // Commencer avec un tableau vide pour les consultations\r\n      medicalRecord: {  // Objet vide pour le dossier médical\r\n        diagnostic: {\r\n          condition: \"\",\r\n          severity: \"\",\r\n          symptoms: [String],\r\n          notes: \"\",\r\n        },\r\n        treatment: {\r\n          medications: [],\r\n        },\r\n        allergies: [],\r\n        operations:[],\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  const [symptoms, setSymptoms] = useState([\"\"]);\r\n  const [medications, setMedications] = useState([{ name: \"\", dosage: \"\", frequency: \"\", duration: \"\", notes: \"\" }]);\r\n  const [lifestyleRecommendations, setLifestyleRecommendations] = useState([\"\"]);\r\n  const [allergies, setAllergies] = useState([\"\"]);\r\n  const [operations, setOperations] = useState([{ type: \"\", estimatedTime: \"\", date: \"\", roomNumber: \"\", status: \"\" }]);\r\n  const [doctors, setDoctors] = useState([]);\r\n\r\n  // Fonction d'ajout des champs dynamiques\r\n  const addField = (setState) => setState(prev => [...prev, \"\"]);\r\n  const addMedication = () => setMedications(prev => [...prev, { name: \"\", dosage: \"\", frequency: \"\", duration: \"\", notes: \"\" }]);\r\n  const addOperation = () => setOperations(prev => [...prev, { type: \"\", estimatedTime: \"\", date: \"\", roomNumber: \"\", status: \"\" }]);\r\n  \r\n\r\n  // Fonction de suppression des champs dynamiques\r\n  const removeField = (setState, index) => setState((prev) => prev.filter((_, i) => i !== index));\r\n  const removeMedication = (index) => setMedications(medications.filter((_, i) => i !== index));\r\n  const removeOperation = (index) => {\r\n    setOperations(operations.filter((_, i) => i !== index));\r\n  };\r\n\r\nuseEffect(() => {\r\n      const fetchDoctors = async () => {\r\n          try {\r\n              const data = await PatientService.getAllDoctors();\r\n              setDoctors(data);\r\n\r\n              console.log(\"doctorsssssssssss\");\r\n              console.log(data);\r\n          } catch (error) {\r\n              console.error(\"Failed to fetch doctors\", error);\r\n          }\r\n      };\r\n      fetchDoctors();\r\n  }, []);\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // Créer une nouvelle consultation avec les valeurs du formulaire\r\n      const newConsultation = {\r\n        doctor: watch(\"doctor\"),  // L'ID du médecin\r\n       duration: Number(watch(\"duration\")),  // Convertir la durée en nombre\r\n        date: watch(\"date\"),  // Date de la consultation\r\n        status: watch(\"status\"),  // Statut de la consultation\r\n        notes: watch(\"notes\") || \"\",  // Notes facultatives\r\n      };\r\n  \r\n      // Créer un nouveau dossier médical avec les valeurs du formulaire\r\n      const newMedicalRecord = {\r\n        diagnostic: {\r\n          condition: watch(\"condition\"),\r\n          severity: watch(\"severity\"),\r\n          symptoms: Array.isArray(watch(\"symptoms\")) ? watch(\"symptoms\") : [],  // Symptômes\r\n          notes: watch(\"diagnostic.notes\") || \"\",  // Notes sur le diagnostic\r\n        },\r\n        treatment: {\r\n          medications: watch(\"medications\"),  // Médicaments\r\n        },\r\n        allergies: watch(\"allergies\"),  // Allergies\r\n      };\r\n  \r\n      // Mettre à jour les données avec la nouvelle consultation et le dossier médical\r\n      const updatedData = {\r\n        ...data,\r\n        consultations: [...data.consultations, newConsultation],  // Ajouter la consultation\r\n        medicalRecord: newMedicalRecord,  // Ajouter le dossier médical\r\n      };\r\n  \r\n      console.log(\"Données envoyées :\", updatedData);  // Affiche les données mises à jour\r\n  \r\n      // Appel à l'API pour enregistrer les données du patient\r\n      await PatientService.createPatient(updatedData);\r\n      \r\n      alert(\"✅ Patient ajouté avec succès !\");\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || error.message || \"Erreur inconnue.\";\r\n      alert(`❌ ${errorMessage}`);\r\n      console.error(\"Détails de l'erreur :\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n  return (\r\n    <Page title=\"Medical Record\">\r\n      <Container>\r\n        <Title>Medical Record Form</Title>\r\n\r\n        {/* Informations de l'utilisateur */}\r\n        <FormSection title=\"User Information\">\r\n          <Row>\r\n            <Column>\r\n              <Input {...register(\"firstName\")} placeholder=\"First Name\" type=\"text\" />\r\n              {errors.firstName && <p>{errors.firstName.message}</p>}  {/* Message d'erreur */}\r\n            </Column>\r\n            <Column>\r\n              <Input {...register(\"lastName\")} placeholder=\"Last Name\" type=\"text\" />\r\n              {errors.lastName && <p>{errors.lastName.message}</p>}  {/* Message d'erreur */}\r\n            </Column>\r\n          </Row>\r\n          <Row>\r\n            <Column>\r\n              <Input {...register(\"email\")} placeholder=\"Email\" type=\"email\" />\r\n              {errors.email && <p>{errors.email.message}</p>}  {/* Message d'erreur */}\r\n            </Column>\r\n          \r\n          </Row>\r\n        </FormSection>\r\n\r\n        {/* Informations sur le patient */}\r\n        <FormSection title=\"Patient Information\">\r\n          <Row>\r\n            <Column>\r\n              <Input {...register(\"phone\")} placeholder=\"Phone\" type=\"tel\" />\r\n              {errors.phone && <p>{errors.phone.message}</p>}  {/* Message d'erreur */}\r\n            </Column>\r\n            <Column>\r\n              <Input {...register(\"address\")} placeholder=\"Address\" type=\"text\" />\r\n              {errors.address && <p>{errors.address.message}</p>}  {/* Message d'erreur */}\r\n            </Column>\r\n          </Row>\r\n          <Row>\r\n          <Column>\r\n  <Input\r\n    {...register(\"age\", {\r\n      setValueAs: (value) => Number(value),  // Conversion en nombre\r\n    })}\r\n    placeholder=\"Age\"\r\n    type=\"number\"\r\n  />\r\n  {errors.age && <p>{errors.age.message}</p>} {/* Message d'erreur */}\r\n</Column>\r\n\r\n            <Column>\r\n              <Select {...register(\"sex\")}>\r\n                <option value=\"\">Select sex</option>\r\n                <option value=\"Female\">Female</option>\r\n                <option value=\"Male\">Male</option>\r\n              </Select>\r\n              {errors.sex && <p>{errors.sex.message}</p>}  {/* Message d'erreur */}\r\n            </Column>\r\n          </Row>\r\n          <Row>\r\n  <Column>\r\n    <Input\r\n      {...register(\"height\", {\r\n        setValueAs: (value) => Number(value),  // Conversion en nombre\r\n      })}\r\n      placeholder=\"Height (cm)\"\r\n      type=\"number\"\r\n    />\r\n    {errors.height && <p>{errors.height.message}</p>} {/* Message d'erreur */}\r\n  </Column>\r\n  <Column>\r\n    <Input\r\n      {...register(\"weight\", {\r\n        setValueAs: (value) => Number(value),  // Conversion en nombre\r\n      })}\r\n      placeholder=\"Weight (kg)\"\r\n      type=\"number\"\r\n    />\r\n    {errors.weight && <p>{errors.weight.message}</p>} {/* Message d'erreur */}\r\n  </Column>\r\n</Row>\r\n\r\n        </FormSection>\r\n\r\n        <FormSection title=\"Consultation\">\r\n          <Row>\r\n          <Select {...register(\"doctor\", { required: \"Veuillez sélectionner un docteur\" })}>\r\n                <option value=\"\">Sélectionner un docteur</option>\r\n                {doctors.map((doctor) => (\r\n                    <option key={doctor._id} value={doctor._id}>\r\n                        {doctor.user.firstName} {doctor.user.lastName}\r\n                    </option>\r\n                ))}\r\n            </Select>\r\n            \r\n            {errors.doctor && <p>{errors.doctor.message}</p>}\r\n          </Row>\r\n          <Row>\r\n            <Column>\r\n              <Input {...register(\"duration\")} placeholder=\"Duration (minutes)\" type=\"number\" />\r\n              {errors.duration && <p>{errors.duration.message}</p>}  \r\n            </Column>\r\n            <Column>\r\n              <Input {...register(\"date\")} placeholder=\"Date\" type=\"date\" />\r\n              {errors.date && <p>{errors.date.message}</p>}  \r\n            </Column>\r\n          </Row>\r\n          <Row>\r\n            <Column>\r\n              <Select {...register(\"status\")}>\r\n                <option value=\"\">Select Status</option>\r\n                <option value=\"Planned\">Planned</option>\r\n                <option value=\"Ongoing\">Ongoing</option>\r\n                <option value=\"Completed\">Completed</option>\r\n                <option value=\"Cancelled\">Cancelled</option>\r\n              </Select>\r\n              {errors.status && <p>{errors.status.message}</p>}  \r\n            </Column>\r\n          </Row>\r\n        </FormSection>\r\n        <FormSection title=\"Medical Record\">\r\n  <SectionSecondTitle>Diagnostics</SectionSecondTitle>\r\n  <Row>\r\n    <Column>\r\n      <Input {...register(\"condition\")} placeholder=\"Condition\" type=\"text\" />\r\n      {errors.condition && <p>{errors.condition.message}</p>}  \r\n    </Column>\r\n    <Column>\r\n      <Input {...register(\"severity\")} placeholder=\"Severity\" type=\"text\" />\r\n      {errors.severity && <p>{errors.severity.message}</p>}  \r\n    </Column>\r\n  </Row>\r\n\r\n  {symptoms.map((symptom, index) => (\r\n    <div key={index} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Input\r\n        {...register(`symptoms.${index}`)}  \r\n        placeholder=\"Symptom\"\r\n        value={symptom}\r\n        onChange={(e) => {\r\n          const newSymptoms = [...symptoms];\r\n          newSymptoms[index] = e.target.value;\r\n          setSymptoms(newSymptoms);\r\n        }}\r\n      />\r\n      {index > 0 && <RemoveButton onClick={() => removeField(setSymptoms, index)}>X</RemoveButton>}\r\n      {errors.symptoms && errors.symptoms[index] && <p>{errors.symptoms[index]?.message}</p>} \r\n    </div>\r\n  ))}\r\n  <ButtonContainer><Button onClick={() => addField(setSymptoms)}>Add Other Symptom</Button></ButtonContainer>\r\n\r\n  <SectionThirdTitle>Medications</SectionThirdTitle>\r\n  {medications.map((medication, index) => (\r\n    <div key={index}>\r\n      <Row>\r\n        <Column>\r\n          <Input\r\n            {...register(`medications.${index}.name`)}   \r\n            placeholder=\"Medication Name\"\r\n            value={medication.name}\r\n            onChange={(e) => {\r\n              const newMedications = [...medications];\r\n              newMedications[index].name = e.target.value;\r\n              setMedications(newMedications);\r\n            }}\r\n          />\r\n          {errors.medications && errors.medications[index]?.name && <p>{errors.medications[index].name.message}</p>}\r\n        </Column>\r\n        <Column>\r\n          <Input\r\n            {...register(`medications.${index}.dosage`)}   \r\n            placeholder=\"Dosage\"\r\n            value={medication.dosage}\r\n            onChange={(e) => {\r\n              const newMedications = [...medications];\r\n              newMedications[index].dosage = e.target.value;\r\n              setMedications(newMedications);\r\n            }}\r\n          />\r\n          {errors.medications && errors.medications[index]?.dosage && <p>{errors.medications[index].dosage.message}</p>}\r\n        </Column>\r\n      </Row>\r\n      <Row>\r\n        <Column>\r\n          <Input\r\n            {...register(`medications.${index}.frequency`)}   \r\n            placeholder=\"Frequency\"\r\n            value={medication.frequency}\r\n            onChange={(e) => {\r\n              const newMedications = [...medications];\r\n              newMedications[index].frequency = e.target.value;\r\n              setMedications(newMedications);\r\n            }}\r\n          />\r\n          {errors.medications && errors.medications[index]?.frequency && <p>{errors.medications[index].frequency.message}</p>}\r\n        </Column>\r\n        <Column>\r\n          <Input\r\n            {...register(`medications.${index}.duration`)}   \r\n            placeholder=\"Duration\"\r\n            value={medication.duration}\r\n            onChange={(e) => {\r\n              const newMedications = [...medications];\r\n              newMedications[index].duration = e.target.value;\r\n              setMedications(newMedications);\r\n            }}\r\n          />\r\n          {errors.medications && errors.medications[index]?.duration && <p>{errors.medications[index].duration.message}</p>}\r\n        </Column>\r\n      </Row>\r\n      <Row>\r\n        <Column>\r\n          <TextArea\r\n            {...register(`medications.${index}.notes`)}   \r\n            placeholder=\"Notes\"\r\n            value={medication.notes}\r\n            onChange={(e) => {\r\n              const newMedications = [...medications];\r\n              newMedications[index].notes = e.target.value;\r\n              setMedications(newMedications);\r\n            }}\r\n          />\r\n        </Column>\r\n      </Row>\r\n      {index > 0 && <RemoveButton onClick={() => removeMedication(index)}>Remove Medication</RemoveButton>}\r\n    </div>\r\n  ))}\r\n  <ButtonContainer><Button onClick={addMedication}>Add Medication</Button></ButtonContainer>\r\n\r\n  <SectionThirdTitle>Allergies</SectionThirdTitle>\r\n  {allergies.map((allergy, index) => (\r\n    <div key={index}>\r\n      <Input\r\n        {...register(`allergies.${index}`)}   \r\n        placeholder=\"Allergy\"\r\n        value={allergy}\r\n        onChange={(e) => {\r\n          const newAllergies = [...allergies];\r\n          newAllergies[index] = e.target.value;\r\n          setAllergies(newAllergies);\r\n        }}\r\n      />\r\n      {errors.allergies && errors.allergies[index] && <p>{errors.allergies[index]?.message}</p>}\r\n      {index > 0 && <RemoveButton onClick={() => removeField(setAllergies, index)}>X</RemoveButton>}\r\n    </div>\r\n  ))}\r\n  <ButtonContainer><Button onClick={() => addField(setAllergies)}>Add Allergy</Button></ButtonContainer> \r\n\r\n\r\n          <SectionThirdTitle>Operations</SectionThirdTitle>\r\n          {operations.map((operation, index) => (\r\n            <div key={index}>\r\n              <Row>\r\n                <Column>\r\n                  <Input\r\n                    {...register(`operations.${index}.type`)}\r\n                    placeholder=\"Operation Type\"\r\n                    value={operation.type}\r\n                    onChange={(e) => {\r\n                      const newOperations = [...operations];\r\n                      newOperations[index].type = e.target.value;\r\n                      setOperations(newOperations);\r\n                    }}\r\n                  />\r\n                  {errors.operations && errors.operations[index]?.type && <p>{errors.operations[index].type.message}</p>}\r\n                </Column>\r\n                <Column>\r\n                <Input\r\n                  {...register(`operations.${index}.estimatedTime`, { valueAsNumber: true })} // ✅ Ajout de valueAsNumber\r\n                  placeholder=\"Estimated Time\"\r\n                  value={operation.estimatedTime}\r\n                  onChange={(e) => {\r\n                    const newOperations = [...operations];\r\n                    newOperations[index].estimatedTime = Number(e.target.value) || 0; // ✅ Conversion en nombre\r\n                    setOperations(newOperations);\r\n                  }}\r\n                />\r\n                {errors.operations && errors.operations[index]?.estimatedTime && (\r\n                  <p>{errors.operations[index].estimatedTime.message}</p>\r\n                )}\r\n              </Column>\r\n\r\n              </Row>\r\n              <Row>\r\n                <Column>\r\n                  <Input\r\n                    {...register(`operations.${index}.date`)}\r\n                    placeholder=\"Operation Date\"\r\n                    value={operation.date}\r\n                    type=\"date\"\r\n                    onChange={(e) => {\r\n                      const newOperations = [...operations];\r\n                      newOperations[index].date = e.target.value;\r\n                      setOperations(newOperations);\r\n                    }}\r\n                  />\r\n                  {errors.operations && errors.operations[index]?.date && <p>{errors.operations[index].date.message}</p>}\r\n                </Column>\r\n                <Column>\r\n                  <Input\r\n                    {...register(`operations.${index}.roomNumber`)}\r\n                    placeholder=\"Room Number\"\r\n                    value={operation.roomNumber}\r\n                    onChange={(e) => {\r\n                      const newOperations = [...operations];\r\n                      newOperations[index].roomNumber = e.target.value;\r\n                      setOperations(newOperations);\r\n                    }}\r\n                  />\r\n                  {errors.operations && errors.operations[index]?.roomNumber && <p>{errors.operations[index].roomNumber.message}</p>}\r\n                </Column>\r\n              </Row>\r\n              <Row>\r\n                <Column>\r\n                  <Select\r\n                    {...register(`operations.${index}.status`)}\r\n                    value={operation.status}\r\n                    onChange={(e) => {\r\n                      const newOperations = [...operations];\r\n                      newOperations[index].status = e.target.value;\r\n                      setOperations(newOperations);\r\n                    }}\r\n                  >\r\n                    <option value=\"\">Select Status</option>\r\n                    <option value=\"Scheduled\">Scheduled</option>\r\n                    <option value=\"Ongoing\">Ongoing</option>\r\n                    <option value=\"Completed\">Completed</option>\r\n                    <option value=\"Cancelled\">Cancelled</option>\r\n                  </Select>\r\n                  {errors.operations && errors.operations[index]?.status && <p>{errors.operations[index].status.message}</p>}\r\n                </Column>\r\n              </Row>\r\n              {index > 0 && <RemoveButton onClick={() => removeOperation(index)}>Remove Operation</RemoveButton>}\r\n            </div>\r\n          ))}\r\n          <ButtonContainer><Button onClick={addOperation}>Add Operation</Button></ButtonContainer>\r\n        </FormSection>\r\n\r\n        <Button onClick={handleSubmit(onSubmit)}>Submit</Button>\r\n      </Container>\r\n   \r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default MedicalForm;\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/patient\";\r\n\r\nconst PatientService = {\r\n getAllPatients: async () => {\r\n    try {\r\n        const response = await axios.get(API_URL);\r\n         return response.data;\r\n    } catch (error) {\r\n          console.error(\"Erreur lors du chargement des patients:\", error);\r\n          throw error;\r\n    }\r\n  },\r\n\r\n  getPatientById: async (id) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  getPatientInfoById: async (id) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/details/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  createPatient: async (patientData) => {\r\n    try {\r\n      const response = await axios.post(API_URL, patientData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la création du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  createSimplePatient: async (patientData) => {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/createSimplePatient`, patientData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la création du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  updateSimplePatient: async (id, patientData) => {\r\n    try {\r\n      const response = await axios.put(`${API_URL}/updateSimplePatient/${id}`, patientData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la mise à jour du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  updatePatient: async (id, patientData) => {\r\n    try {\r\n      const response = await axios.put(`${API_URL}/${id}`, patientData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la mise à jour du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  deletePatient: async (id) => {\r\n    try {\r\n      await axios.delete(`${API_URL}/${id}`);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  toggleUserStatus: async (id) => {\r\n    try {\r\n      console.log(\"ID envoyé à l'API:\", id);\r\n      const response = await axios.put(`${API_URL}/toggle-status/${id}`, {}, { withCredentials: true });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la désactivation / activation du patient:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  getAllDoctors: async () => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/listDoctors`);\r\n         return response.data;\r\n    } catch (error) {\r\n          console.error(\"Erreur lors du chargement des doctors:\", error);\r\n          throw error;\r\n    }\r\n  },\r\n  \r\n};\r\n\r\nexport default PatientService;"],"names":["Content","styled","div","breakpoints","tablet","flex","col","laptopL","ContentTitle","h1","Wrapper","desktop","between","Controls","Widgets","ResponsiveGridLayout","withSize","WidthProvider","Responsive","StaticGrid","_ref","layouts","children","id","isLayoutEditable","fontScale","useInterfaceContext","dispatch","useDispatch","isMobile","useWindowSize","width","_jsx","_Fragment","className","xl","lg","md","sm","cols","margin","isResizable","rowHeight","isDraggable","isBounded","compactType","useCSSTransforms","autoSize","onLayoutChange","updateLayout","saveToLocalStorage","undefined","title","hasBadge","hasTitle","qty","pageRef","useRef","device","useMobileDetect","isTablet","pathname","useLocation","isDashboard","includes","layoutKey","replace","current","useSelector","state","layout","useEffect","scrollTop","_jsxs","ref","Helmet","as","motion","initial","opacity","whileInView","transition","duration","viewport","once","QtyBadge","isDesktop","ControlWrapper","LayoutControl","FullscreenControl","ContrastControl","ThemeControl","DirectionControl","ScaleControl","Grid","Container","Title","SectionTitle","h3","SectionSecondTitle","h4","SectionThirdTitle","Select","select","Input","input","TextArea","textarea","ButtonContainer","Button","button","Row","Column","RemoveButton","form","formSchema","z","object","firstName","string","min","lastName","email","phone","address","age","number","int","sex","height","weight","consultations","array","date","refine","val","isNaN","Date","parse","message","doctor","status","notes","optional","medicalRecord","diagnostic","treatment","medications","allergies","operations","type","estimatedTime","roomNumber","FormSection","MedicalForm","register","handleSubmit","formState","errors","watch","setValue","useForm","resolver","zodResolver","defaultValues","condition","severity","symptoms","String","setSymptoms","useState","setMedications","name","dosage","frequency","lifestyleRecommendations","setLifestyleRecommendations","setAllergies","setOperations","doctors","setDoctors","addField","setState","prev","removeField","index","filter","_","i","async","data","PatientService","getAllDoctors","console","log","error","fetchDoctors","Page","placeholder","setValueAs","value","Number","required","map","_id","user","symptom","_errors$symptoms$inde","style","display","alignItems","onChange","e","newSymptoms","target","onClick","medication","_errors$medications$i","_errors$medications$i2","_errors$medications$i3","_errors$medications$i4","newMedications","removeMedication","addMedication","allergy","_errors$allergies$ind","newAllergies","operation","_errors$operations$in","_errors$operations$in2","_errors$operations$in3","_errors$operations$in4","_errors$operations$in5","newOperations","valueAsNumber","removeOperation","addOperation","newConsultation","newMedicalRecord","Array","isArray","updatedData","createPatient","alert","_error$response","_error$response$data","errorMessage","response","API_URL","getAllPatients","axios","get","getPatientById","getPatientInfoById","post","patientData","createSimplePatient","updateSimplePatient","put","updatePatient","deletePatient","delete","toggleUserStatus","withCredentials"],"sourceRoot":""}