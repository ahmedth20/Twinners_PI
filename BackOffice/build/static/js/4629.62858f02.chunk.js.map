{"version":3,"file":"static/js/4629.62858f02.chunk.js","mappings":"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","sources":["../WaveSurfer/webpack/universalModuleDefinition","../WaveSurfer/src/drawer.canvasentry.js","../WaveSurfer/src/drawer.js","../WaveSurfer/src/drawer.multicanvas.js","../WaveSurfer/src/mediaelement-webaudio.js","../WaveSurfer/src/mediaelement.js","../WaveSurfer/src/peakcache.js","../WaveSurfer/src/util/absMax.js","../WaveSurfer/src/util/clamp.js","../WaveSurfer/src/util/fetch.js","../WaveSurfer/src/util/frame.js","../WaveSurfer/src/util/get-id.js","../WaveSurfer/src/util/index.js","../WaveSurfer/src/util/max.js","../WaveSurfer/src/util/min.js","../WaveSurfer/src/util/observer.js","../WaveSurfer/src/util/orientation.js","../WaveSurfer/src/util/prevent-click.js","../WaveSurfer/src/util/request-animation-frame.js","../WaveSurfer/src/util/silence-mode.js","../WaveSurfer/src/util/style.js","../WaveSurfer/src/wavesurfer.js","../WaveSurfer/src/webaudio.js","../WaveSurfer/node_modules/debounce/index.js","../WaveSurfer/webpack/bootstrap","../WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(self, () => {\nreturn ","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     * @param {string|string[]} waveColor Fill color for the wave canvas,\n     * or an array of colors to apply as a gradient\n     * @param {?string|string[]} progressColor Fill color for the progress canvas,\n     * or an array of colors to apply as a gradient\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\n        }\n    }\n\n    /**\n     * Utility function to handle wave color arguments\n     *\n     * When the color argument type is a string or CanvasGradient instance,\n     * it will be returned as is. Otherwise, it will be treated as an array,\n     * and a new CanvasGradient will be returned\n     *\n     * @since 6.0.0\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {string|string[]|CanvasGradient} color Either a single fill color\n     *     for the wave canvas, an existing CanvasGradient instance, or an array\n     *     of colors to apply as a gradient\n     * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\n     *     canvas gradient\n     */\n    getFillStyle(ctx, color) {\n        if (typeof color == 'string' || color instanceof CanvasGradient) {\n            return color;\n        }\n\n        const waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n        color.forEach((value, index) => waveGradient.addColorStop((index / color.length), value));\n\n        return waveGradient;\n    }\n\n    /**\n     * Set the canvas transforms for wave and progress\n     *\n     * @param {boolean} vertical Whether to render vertically\n     */\n    applyCanvasTransforms(vertical) {\n        if (vertical) {\n            // Reflect the waveform across the line y = -x\n            this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n\n            if (this.hasProgressCanvas) {\n                this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n            Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = util.withOrientation(container, params.vertical);\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = util.withOrientation(\n            this.container.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                cursor: this.params.hideCursor ? 'none' : 'auto',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = util.withOrientation(\n            e.targetTouches ? e.targetTouches[0] : e,\n            this.params.vertical\n        ).clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n        const progressPixels = this.getProgressPixels(bbox, clientX);\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress = progressPixels *\n                (this.params.pixelRatio / nominalWidth) || 0;\n        } else {\n            progress = (progressPixels + this.wrapper.scrollLeft) /\n                this.wrapper.scrollWidth || 0;\n        }\n\n        return util.clamp(progress, 0, 1);\n    }\n\n    getProgressPixels(wrapperBbox, clientX) {\n        if (this.params.rtl) {\n            return wrapperBbox.right - clientX;\n        } else {\n            return clientX - wrapperBbox.left;\n        }\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const orientedEvent = util.withOrientation(e, this.params.vertical);\n            const scrollbarHeight = this.wrapper.offsetHeight -\n                  this.wrapper.clientHeight;\n\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            const newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n            this.style(this.wrapper, {\n                width: newWidth\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container.domElement) {\n                this.container.removeChild(this.wrapper.domElement);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n\n        /**\n         * Whether to render the waveform vertically. Defaults to false.\n         *\n         * @type {boolean}\n         */\n        this.vertical = params.vertical;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n        this.style(this.progressWave, {\n            position: 'absolute',\n            zIndex: 3,\n            left: 0,\n            top: 0,\n            bottom: 0,\n            overflow: 'hidden',\n            width: '0',\n            display: 'none',\n            boxSizing: 'border-box',\n            borderRightStyle: 'solid',\n            pointerEvents: 'none'\n        });\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        let wave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('canvas')),\n            this.params.vertical\n        );\n        this.style(wave, {\n            position: 'absolute',\n            zIndex: 2,\n            left: leftOffset + 'px',\n            top: 0,\n            bottom: 0,\n            height: '100%',\n            pointerEvents: 'none'\n        });\n        entry.initWave(wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            let progress = util.withOrientation(\n                this.progressWave.appendChild(document.createElement('canvas')),\n                this.params.vertical\n            );\n            this.style(progress, {\n                position: 'absolute',\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%'\n            });\n            entry.initProgress(progress);\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let peakIndex = first;\n                for (peakIndex; peakIndex < last; peakIndex += step) {\n\n                    // search for the highest peak in the range this bar falls into\n                    let peak = 0;\n                    let peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\n                    const peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\n                    do { // do..while makes sure at least one peak is always evaluated\n                        const newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\n                        if (newPeak > peak) {\n                            peak = newPeak; // higher\n                        }\n                        peakIndexRange += peakIndexScale; // skip every other value for negatives\n                    } while (peakIndexRange < peakIndexEnd);\n\n                    // calculate the height of this bar according to the highest peak found\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    // raise the bar height to the specified minimum height\n                    // Math.max is used to replace any value smaller than barMinHeight (not just 0) with barMinHeight\n                    if (this.params.barMinHeight) {\n                        h = Math.max(h, this.params.barMinHeight);\n                    }\n\n                    this.fillRect(\n                        peakIndex + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius,\n                        ch\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius,\n                    channelIndex\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            this.applyCanvasTransforms(entry, this.params.vertical);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\n     */\n    fillRect(x, y, width, height, radius, channelIndex) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n                this.setFillStyles(entry, waveColor, progressColor);\n                this.applyCanvasTransforms(entry, this.params.vertical);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    let overallAbsMax;\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\n                        // calculate maximum peak across channels to use for normalization\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\n                    }\n\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const halfH = height / 2;\n\n            let offsetY = height * drawIndex || 0;\n\n            // Override offsetY if overlay is true\n            if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.overlay) {\n                offsetY = 0;\n            }\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Set the canvas transforms for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {boolean} vertical Whether to render the waveform vertically\n     */\n    applyCanvasTransforms(entry, vertical = false) {\n        entry.applyCanvasTransforms(vertical);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.waiting = () => {\n            this.fireEvent('waiting');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null && !isNaN(start)) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n","import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n","/**\n * Returns a number limited to the given range.\n *\n * @param {number} val The number to be limited to a range\n * @param {number} min The lower boundary of the limit range\n * @param {number} max The upper boundary of the limit range\n * @returns {number} A number in the range [min, max]\n */\nexport default function clamp(val, min, max) {\n    return Math.min(Math.max(min, val), max);\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","export { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as absMax } from './absMax';\nexport { default as Observer } from './observer';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\nexport { default as clamp } from './clamp';\nexport { default as withOrientation } from './orientation';\nexport { default as ignoreSilenceMode } from './silence-mode';\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","const verticalPropMap = {\n    width: 'height',\n    height: 'width',\n\n    overflowX: 'overflowY',\n    overflowY: 'overflowX',\n\n    clientWidth: 'clientHeight',\n    clientHeight: 'clientWidth',\n\n    clientX: 'clientY',\n    clientY: 'clientX',\n\n    scrollWidth: 'scrollHeight',\n    scrollLeft: 'scrollTop',\n\n    offsetLeft: 'offsetTop',\n    offsetTop: 'offsetLeft',\n    offsetHeight: 'offsetWidth',\n    offsetWidth: 'offsetHeight',\n\n    left: 'top',\n    right: 'bottom',\n    top: 'left',\n    bottom: 'right',\n\n    borderRightStyle: 'borderBottomStyle',\n    borderRightWidth: 'borderBottomWidth',\n    borderRightColor: 'borderBottomColor'\n};\n\n/**\n * Convert a horizontally-oriented property name to a vertical one.\n *\n * @param {string} prop A property name\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {string} prop, converted appropriately\n */\nfunction mapProp(prop, vertical) {\n    if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n        return vertical ? verticalPropMap[prop] : prop;\n    } else {\n        return prop;\n    }\n}\n\nconst isProxy = Symbol(\"isProxy\");\n\n/**\n * Returns an appropriately oriented object based on vertical.\n * If vertical is true, attribute getting and setting will be mapped through\n * verticalPropMap, so that e.g. getting the object's .width will give its\n * .height instead.\n * Certain methods of an oriented object will return oriented objects as well.\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\n * and thus fail typechecks. Use domElement to get the actual element for this.\n *\n * @param {object} target The object to be wrapped and oriented\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n * @since 5.0.0\n */\nexport default function withOrientation(target, vertical) {\n    if (target[isProxy]) {\n        return target;\n    } else {\n        return new Proxy(\n            target, {\n                get: function(obj, prop, receiver) {\n                    if (prop === isProxy) {\n                        return true;\n                    } else if (prop === 'domElement') {\n                        return obj;\n                    } else if (prop === 'style') {\n                        return withOrientation(obj.style, vertical);\n                    } else if (prop === 'canvas') {\n                        return withOrientation(obj.canvas, vertical);\n                    } else if (prop === 'getBoundingClientRect') {\n                        return function(...args) {\n                            return withOrientation(obj.getBoundingClientRect(...args), vertical);\n                        };\n                    } else if (prop === 'getContext') {\n                        return function(...args) {\n                            return withOrientation(obj.getContext(...args), vertical);\n                        };\n                    } else {\n                        let value = obj[mapProp(prop, vertical)];\n                        return typeof value == 'function' ? value.bind(obj) : value;\n                    }\n                },\n                set: function(obj, prop, value) {\n                    obj[mapProp(prop, vertical)] = value;\n                    return true;\n                }\n            }\n        );\n    }\n}\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","/**\n * Ignores device silence mode when using the `WebAudio` backend.\n *\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n * when muting the device ringer.\n *\n * @since 5.2.0\n */\nexport default function ignoreSilenceMode() {\n    // Set webaudio context with 1 second silent audio 44100 bit rate buffer to allow playing audio even if silent switch is on the device\n    const silentAC = new AudioContext();\n    const silentBS = silentAC.createBufferSource();\n    silentBS.buffer = silentAC.createBuffer(1, 1, 44100);\n    silentBS.connect(silentAC.destination);\n    silentBS.start();\n\n    // Set the src to a short bit of url encoded as a silent mp3\n    // NOTE The silence MP3 must be high quality, when web audio sounds are played\n    // in parallel the web audio sound is mixed to match the bitrate of the html sound\n    // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n    const audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n\n    // disable iOS Airplay (setting the attribute in js doesn't work)\n    let tmp = document.createElement(\"div\");\n    tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n\n    let audioSilentMode = tmp.children.item(0);\n    audioSilentMode.src = audioData;\n    audioSilentMode.preload = \"auto\";\n    audioSilentMode.type = \"audio/mpeg\";\n    audioSilentMode.disableRemotePlayback = true;\n\n    // play\n    audioSilentMode.play();\n\n    // cleanup\n    audioSilentMode.remove();\n    tmp.remove();\n}\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} hideCursor=false Whether to hide the mouse cursor\n * when one would normally be shown by default.\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n * when using the `WebAudio` backend.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @typedef {Object} SplitChannelOptions\n * @desc parameters applied when splitChannels option is true\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n * @property {object} channelColors={} object describing color for each channel. Example:\n * {\n *     0: {\n *         progressColor: 'green',\n *         waveColor: 'pink'\n *     },\n *     1: {\n *         progressColor: 'orange',\n *         waveColor: 'purple'\n *     }\n * }\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n * @property {boolean} relativeNormalization=false determines whether\n * normalization is done per channel or maintains proportionality between\n * channels. Only applied when normalize and splitChannels are both true.\n * @property {boolean} splitDragSelection=false determines if drag selection in regions\n * plugin works separately on each channel or only one selection for all channels\n * @since 4.3.0\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        hideCursor: false,\n        ignoreSilenceMode: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: [],\n            relativeNormalization: false,\n            splitDragSelection: false\n        },\n        vertical: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n        this.params.splitChannelsOptions = Object.assign(\n            {},\n            this.defaultParams.splitChannelsOptions,\n            params.splitChannelsOptions\n        );\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            if (this.params.vertical === true) {\n                util.style(this.container, { transform: 'rotateX(180deg)' });\n            } else {\n                util.style(this.container, { transform: 'rotateY(180deg)' });\n            }\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    this.drawer.wrapper &&\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    if (prevWidth) {\n                        // redraw only if waveform container is rendered and has a width\n                        this.drawer.fireEvent('redraw');\n                    }\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n\n        // Relay the dblclick event from the drawer\n        this.drawer.on('dblclick', (e, progress) => {\n            this.fireEvent('dblclick', e, progress);\n        });\n\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        if (this.params.ignoreSilenceMode) {\n            // ignores device hardware silence mode\n            util.ignoreSilenceMode();\n        }\n\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\n        const paused = this.backend.isPaused();\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.pause();\n        }\n\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.play();\n        }\n\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        if (this.isMuted === true) {\n            this.savedVolume = newVolume;\n            return;\n        }\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getWaveColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\n        }\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color, channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\n        } else {\n            this.params.waveColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getProgressColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\n        }\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color, channelIdx) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\n        } else {\n            this.params.progressColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        // loadBuffer(url, peaks, duration) requires that url is a string\n        // but users can pass in a HTMLMediaElement to WaveSurfer\n        if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n            url = url.src;\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If peaks are provided, render them and fire the `waveform-ready` event.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n        }\n\n        // If no pre-decoded peaks are provided, or are provided with\n        // forceDecode flag, attempt to download the audio file and decode it\n        // with Web Audio.\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        if (!this.isDestroyed) {\n            this.arraybuffer = arraybuffer;\n            this.backend.decodeArrayBuffer(\n                arraybuffer,\n                data => {\n                    // Only use the decoded data if we haven't been destroyed or\n                    // another decode started in the meantime\n                    if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                        callback(data);\n                        this.arraybuffer = null;\n                    }\n                },\n                () => this.fireEvent('error', 'Error decoding audiobuffer')\n            );\n        }\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and optionally opens in a new window\n     * as valid JSON Blob instance.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n\n        return new Promise((resolve, reject) => {\n            if (!noWindow){\n                const blobJSON = new Blob(\n                    [JSON.stringify(arr)],\n                    {type: 'application/json;charset=utf-8'}\n                );\n                const objURL = URL.createObjectURL(blobJSON);\n                window.open(objURL);\n                URL.revokeObjectURL(objURL);\n            }\n            resolve(arr);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `image/png`. Other supported types are\n     * `image/jpeg` and `image/webp`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `image/png`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `image/jpeg` and `image/webp`.\n     * @param {string} type Image data type to return. Either `dataURL` (default)\n     * or `blob`.\n     * @return {string|string[]|Promise} When using `dataURL` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `blob` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n            // See: Wavesurfer issue #2042\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n            if (this.currentRequest._reader) {\n                // Ignoring exceptions thrown by call to cancel()\n                this.currentRequest._reader.cancel().catch(err => {});\n            }\n\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n            // clears memory usage\n            this.backend = null;\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {util.Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /** @private */\n        this.sinkStreamDestination = null;\n        /** @private */\n        this.sinkAudioElement = null;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n            this.scriptNode.connect(this.ac.destination);\n        }\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        const loop = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration() && this.state !== this.states[FINISHED]) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause && this.state !== this.states[PAUSED]) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n                util.frame(loop)();\n            }\n        };\n\n        loop();\n    }\n\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            if (!this.sinkAudioElement) {\n                this.sinkAudioElement = new window.Audio();\n                // autoplay is necessary since we're not invoking .play()\n                this.sinkAudioElement.autoplay = true;\n            }\n            if (!this.sinkAudioElement.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            if (!this.sinkStreamDestination) {\n                this.sinkStreamDestination = this.ac.createMediaStreamDestination();\n            }\n            this.gainNode.disconnect();\n            this.gainNode.connect(this.sinkStreamDestination);\n            this.sinkAudioElement.srcObject = this.sinkStreamDestination.stream;\n\n            return this.sinkAudioElement.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        if ('webkitAudioContext' in window) {\n            // Safari: no support for Promise-based decodeAudioData enabled\n            // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n            this.offlineAc.decodeAudioData(\n                arraybuffer,\n                data => callback(data),\n                errback\n            );\n        } else {\n            this.offlineAc.decodeAudioData(arraybuffer).then(\n                (data) => callback(data)\n            ).catch(\n                (err) => errback(err)\n            );\n        }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode && this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n\n        // disconnect resources used by setSinkId\n        if (this.sinkStreamDestination) {\n            this.sinkAudioElement.pause();\n            this.sinkAudioElement.srcObject = null;\n            this.sinkStreamDestination.disconnect();\n            this.sinkStreamDestination = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.setPlaybackRate(this.playbackRate);\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        try {\n            this.source && this.source.stop(0);\n        } catch (err) {\n            // Calling stop can throw the following 2 errors:\n            // - RangeError (The value specified for when is negative.)\n            // - InvalidStateNode (The node has not been started by calling start().)\n            // We can safely ignore both errors, because:\n            // - The range is surely correct\n            // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n        }\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.source && this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/wavesurfer.js\");\n"],"names":["factory","self","_style","_interopRequireDefault","__webpack_require__","_getId","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","arg","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","CanvasEntry","instance","Constructor","_classCallCheck","this","wave","waveCtx","progress","progressCtx","start","end","id","name","toLowerCase","canvasContextAttributes","protoProps","staticProps","value","element","getContext","elementWidth","totalWidth","width","height","offsetLeft","elementSize","hasProgressCanvas","clearRect","canvas","waveColor","progressColor","fillStyle","getFillStyle","ctx","color","CanvasGradient","waveGradient","createLinearGradient","forEach","index","addColorStop","vertical","setTransform","x","y","radius","fillRectToContext","drawRoundedRect","fillRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","peaks","absmax","halfH","offsetY","drawLineToContext","peak","h","first","Math","round","canvasStart","canvasEnd","scale","halfOffset","absmaxHalf","halfPixel","j","format","quality","type","_this","Promise","resolve","toBlob","toDataURL","exports","module","util","nodeInterop","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","desc","set","_interopRequireWildcard","WeakMap","cacheBabelInterop","cacheNodeInterop","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","arguments","apply","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","getPrototypeOf","Drawer","_util$Observer","subClass","superClass","create","_inherits","_super","container","params","withOrientation","pixelRatio","lastPos","wrapper","el","styles","style","appendChild","document","createElement","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","cursor","hideCursor","overflowX","hideScrollbar","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","nominalWidth","parentWidth","getWidth","progressPixels","getProgressPixels","scrollLeft","scrollWidth","clamp","wrapperBbox","rtl","right","left","_this2","addEventListener","orientedEvent","scrollbarHeight","offsetHeight","clientHeight","clientY","bottom","interact","fireEvent","handleEvent","setWidth","clearWave","barWidth","drawBars","drawWave","percent","recenterOnPosition","immediate","half","clientWidth","maxScroll","offset","rate","autoCenterRate","max","min","newWidth","updateSize","_progress","minPxDelta","pos","autoCenter","newPos","autoCenterImmediately","updateProgress","unAll","parentNode","domElement","removeChild","channelIndex","Observer","_drawer","_drawer2","MultiCanvas","_Drawer","maxCanvasWidth","maxCanvasElementWidth","canvases","progressWave","EntryClass","drawingContextAttributes","overlap","ceil","barRadius","createWrapper","createElements","zIndex","top","overflow","boxSizing","borderRightStyle","pointerEvents","addCanvas","updateCursor","borderRightWidth","cursorWidth","borderRightColor","cursorColor","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","updateDimensions","leftOffset","initWave","initProgress","push","lastEntry","parentElement","destroy","pop","_this3","frame","_this4","prepareDraw","_ref","hasMinVals","ch","peakIndexScale","bar","step","barGap","last","peakIndex","peakIndexRange","floor","peakIndexEnd","newPeak","abs","barMinHeight","_this5","_ref2","reflectedPeaks","len","drawLine","_this6","_ref3","splitChannelsOptions","channelColors","setFillStyles","applyCanvasTransforms","drawLines","startCanvas","endCanvas","intersection","x1","y1","x2","y2","_ref4","fillRects","splitChannels","filterChannels","includes","fn","drawIndex","normalizedMax","_this7","Array","channels","overallAbsMax","filteredChannels","filter","c","hideChannel","overlay","setHeight","relativeNormalization","map","channelPeaks","absMax","indexOf","barHeight","normalize","some","val","all","getImage","images","_get","property","receiver","base","object","_superPropBase","MediaElementWebAudio","_MediaElement","sourceMediaElement","setPlaybackRate","audioRate","createTimer","createVolumeNode","createScriptNode","createAnalyserNode","media","preload","createMediaElementSource","mediaElement","ac","connect","analyser","resumeAudioContext","destroyWebAudio","_webaudio","MediaElement","_WebAudio","currentTime","duration","paused","playbackRate","play","pause","volume","mediaType","elementPosition","isMuted","buffer","onPlayEnd","mediaListeners","error","waiting","canplay","ended","seeked","event","volumechange","muted","keys","removeEventListener","on","onAudioProcess","isPaused","getCurrentTime","url","controls","mediaControls","autoplay","src","prevMedia","querySelector","_load","elt","HTMLMediaElement","Error","load","_setupMediaListeners","setVolume","explicitDuration","Infinity","seekable","getDuration","isNaN","clearPlayEnd","seekTo","promise","setPlayEnd","_onPlayEnd","time","un","deviceId","setSinkId","reject","destroyed","removeMediaElementOnDestroy","PeakCache","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","arr","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs","values","_max","_min","options","_observer","fetchHeaders","Headers","fetchRequest","Request","controller","AbortController","requestHeaders","header","append","responseType","fetchOptions","method","headers","mode","credentials","redirect","referrer","signal","fetch","then","response","progressAvailable","body","contentLength","onProgress","Response","ReadableStream","ProgressHandler","errMsg","ok","arrayBuffer","json","blob","text","status","catch","_reader","getReader","total","parseInt","loaded","read","done","lengthComputable","close","byteLength","enqueue","func","_len","args","_key","_requestAnimationFrame","prefix","random","toString","substring","_absMax","_frame","_debounce","_preventClick","_fetch","_clamp","_orientation","_silenceMode","largest","smallest","_disabledEventEmissions","handlers","callback","splice","handler","setTimeout","eventNames","_len2","_key2","_isDisabledEventEmission","isProxy","prop","mapProp","verticalPropMap","offsetTop","offsetWidth","preventClickHandler","stopPropagation","_default","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","silentAC","AudioContext","silentBS","createBufferSource","createBuffer","destination","tmp","innerHTML","audioSilentMode","children","disableRemotePlayback","remove","_mediaelement","_peakcache","_mediaelementWebaudio","_defineProperty","_createClass","WaveSurfer","audioContext","audioScriptProcessor","backend","backgroundColor","dragSelection","desynchronized","forceDecode","ignoreSilenceMode","loopSelection","mediaContainer","minPxPerSec","partialRender","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","renderer","responsive","skipLength","splitDragSelection","xhr","WebAudio","assign","defaultParams","transform","setBackgroundColor","savedVolume","tmpEvents","currentRequest","arraybuffer","drawer","peakCache","supportsWebAudio","Backend","backends","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","init","drawBuffer","getPlayedPercents","newVolume","getVolume","seconds","skip","seekAndCenter","recenter","_this8","isFinite","isWebAudioBackend","oldScrollParent","getPlaybackRate","setMute","mute","filters","channelIdx","background","channelIndices","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","_this9","decodeArrayBuffer","data","loadDecodedBuffer","_this10","reader","FileReader","loadArrayBuffer","readAsArrayBuffer","empty","preloadIgnoreReasons","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","_this11","action","once","getArrayBuffer","setPeaks","urlOrElt","_this12","loadElt","err","_this13","_this14","request","fetchFile","percentComplete","accuracy","noWindow","blobJSON","Blob","JSON","stringify","objURL","URL","createObjectURL","open","revokeObjectURL","cancel","abort","stop","disconnectSource","cancelAjax","clearTmpEvents","destroyAllPlugins","PLAYING","PAUSED","FINISHED","_defineProperty2","_this$states","addOnAudioProcess","startPosition","getPlayedTime","getAudioContext","lastPlay","scheduledPause","states","stateBehaviors","gainNode","mergedPeaks","offlineAc","scriptNode","source","splitPeaks","state","sinkStreamDestination","sinkAudioElement","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","setState","setLength","disconnect","setFilters","disconnectFilters","reduce","prev","curr","loop","createAnalyser","createGain","createGainNode","Audio","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","errback","getOfflineAudioContext","decodeAudioData","numberOfChannels","newBuffer","sampleSize","sampleStep","chan","getChannelData","closeAudioContext","createSource","noteGrainOn","noteOff","resume","adjustedTime","wait","timeout","context","timestamp","later","Date","now","debounced","callNow","clear","clearTimeout","flush","__webpack_module_cache__","__webpack_exports__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}