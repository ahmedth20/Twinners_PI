{"version":3,"file":"static/js/8818.ff4f55d7.chunk.js","mappings":"wNA0FA,QA/EA,WACI,MAAOA,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,KAChCO,EAAiBC,IAAsBR,EAAAA,EAAAA,UAAS,IACjDS,EAAcC,OAAOC,WAAW,0BAA0BC,QAC1DC,GAASC,EAAAA,EAAAA,IAAG,0BAMhBC,EAAAA,EAAAA,YAAU,KACRF,EAAOG,GAAG,mBAAoBC,IAC5BT,EAAmBS,EAAKZ,QAAQ,GAChC,GACD,KACLU,EAAAA,EAAAA,YAAU,KAGNF,EAAOG,GAAG,sBAAuBX,IAC7Ba,QAAQC,IAAI,kCAAmCd,GAE/CD,EAAoBC,EAAQ,IAIzB,KACHQ,EAAOO,IAAI,sBACXP,EAAOQ,YAAY,IAExB,IAEH,MAAMC,EAAmBA,KACrBpB,GAAa,GACbH,EAAe,GAAG,EAStB,OANAW,OAAOa,iBAAiB,UAAU,KAC1Bd,GACAa,GACJ,KAIAE,EAAAA,EAAAA,KAACC,EAAAA,EAAIC,UAAS,CAACC,YAAY,EAAMC,UAAW9B,EAAa+B,SAAU9B,EAAe+B,UAC9EC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,MAAM,WAAUH,SAAA,EACtBC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKJ,SAAA,EAC1BN,EAAAA,EAAAA,KAAA,MAAAM,SAAI,oBACJN,EAAAA,EAAAA,KAAA,SACEW,KAAK,OACLC,YAAY,UACZC,SAAWC,GAAMhC,EAAWgC,EAAEC,OAAOC,UAEvChB,EAAAA,EAAAA,KAAA,UAAQiB,QA9CUC,KAChB7B,EAAO8B,KAAK,eAAgB,CAAEtC,WAAU,EA6CbyB,SAAC,UAC9BC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,aAAWvB,SAEJiB,EAAAA,EAAAA,KAAA,OAAAM,UACIN,EAAAA,EAAAA,KAACoB,EAAAA,EAAQ,CAACC,QAAQ,UAAUC,KAAMhD,EAAaiD,aAAchD,EAAgBiD,SAAU9C,KADlF,kBAGTsB,EAAAA,EAAAA,KAAA,OAAAM,SAEQrB,GACIe,EAAAA,EAAAA,KAACyB,EAAAA,EAAW,CAACC,UAAWjD,EAAWkD,kBAAmB7B,EAAiBQ,UACnEN,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAACP,QAAQ,UAAUC,KAAMhD,OAGvC0B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAACP,QAAQ,UAAUC,KAAMhD,KAPtC,aAYRK,IAAoBqB,EAAAA,EAAAA,KAAA,OAAKU,UAAU,oBAAmBJ,SAAE3B,QAIzE,C","sources":["pages/AmbulanceGettingMessage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Ajoutez useEffect ici\r\n\r\n// composants\r\nimport Page from 'layout/Page';\r\nimport UserList from 'components/Messenger/UsersList';\r\nimport ModalWindow from 'components/ModalWindow';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Messenger from 'components/Messenger';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nfunction AmbulanceGettingMessage() {\r\n    const [selectedTab, setSelectedTab] = useState('');\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [ambulanceMessage, setAmbulanceMessage] = useState(''); // Définir l'état pour le message\r\n    const [message, setMessage] = useState('');\r\n    const [receivedMessage, setReceivedMessage] = useState('');\r\n    const smallScreen = window.matchMedia('(max-width: 1038.98px)').matches;\r\n    const socket = io('http://localhost:5000');  // Créez la connexion socket\r\n\r\n    const sendMessage = () => {\r\n        socket.emit('send_message', { message });\r\n      };\r\n    \r\n      useEffect(() => {\r\n        socket.on('receive_message', (data) => {\r\n          setReceivedMessage(data.message);\r\n        });\r\n      }, []);\r\n    useEffect(() => {\r\n\r\n        // Ecouter les messages de réponse du serveur\r\n        socket.on('ambulance-response', (message) => {\r\n            console.log('Message from ambulance service:', message);\r\n            // Mettez à jour l'état local pour afficher ce message dans l'interface utilisateur\r\n            setAmbulanceMessage(message);\r\n        });\r\n\r\n        // Cleanup (arrêter d'écouter lors du démontage du composant)\r\n        return () => {\r\n            socket.off('ambulance-response');\r\n            socket.disconnect(); // Déconnecter le socket lorsque le composant est démonté\r\n        };\r\n    }, []);\r\n\r\n    const handleModalClose = () => {\r\n        setOpenModal(false);\r\n        setSelectedTab('');\r\n    };\r\n\r\n    window.addEventListener('resize', () => {\r\n        if (smallScreen) {\r\n            handleModalClose();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Tab.Container transition={true} activeKey={selectedTab} onSelect={setSelectedTab}>\r\n            <Page title=\"Messages\">\r\n            <div className=\"App\">\r\n      <h2>Frontend App 2</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Message\"\r\n        onChange={(e) => setMessage(e.target.value)}\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n      <p>Received: {receivedMessage}</p>\r\n    </div>\r\n                <div key=\"contacts-list\">\r\n                    <UserList variant=\"patient\" user={selectedTab} onUserSelect={setSelectedTab} setModal={setOpenModal} />\r\n                </div>\r\n                <div key=\"messenger\">\r\n                    {\r\n                        smallScreen ?\r\n                            <ModalWindow isVisible={openModal} visibilityHandler={handleModalClose}>\r\n                                <Messenger variant=\"patient\" user={selectedTab}/>\r\n                            </ModalWindow>\r\n                            :\r\n                            <Messenger variant=\"patient\" user={selectedTab}/>\r\n                    }\r\n                </div>\r\n\r\n                {/* Afficher le message reçu */}\r\n                {ambulanceMessage && <div className=\"ambulance-message\">{ambulanceMessage}</div>}\r\n            </Page>\r\n        </Tab.Container>\r\n    );\r\n}\r\n\r\nexport default AmbulanceGettingMessage;\r\n"],"names":["selectedTab","setSelectedTab","useState","openModal","setOpenModal","ambulanceMessage","setAmbulanceMessage","message","setMessage","receivedMessage","setReceivedMessage","smallScreen","window","matchMedia","matches","socket","io","useEffect","on","data","console","log","off","disconnect","handleModalClose","addEventListener","_jsx","Tab","Container","transition","activeKey","onSelect","children","_jsxs","Page","title","className","type","placeholder","onChange","e","target","value","onClick","sendMessage","emit","UserList","variant","user","onUserSelect","setModal","ModalWindow","isVisible","visibilityHandler","Messenger"],"sourceRoot":""}