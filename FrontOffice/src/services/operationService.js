import axios from "axios";

const API_URL = "http://localhost:5000/operation";

const OperationService = {
  // üîπ R√©cup√©rer les op√©rations par userId
  getOperationsByUserId: async (userId) => {
    try {
      const response = await axios.get(`${API_URL}/ByUser/${userId}`);
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des op√©rations par userId:", error);
      throw error;
    }
  },

  // üîπ R√©cup√©rer toutes les op√©rations
  getAllOperations: async () => {
    try {
      const response = await axios.get(API_URL);
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des op√©rations:", error);
      throw error;
    }
  },

  // üîπ R√©cup√©rer une op√©ration par son ID
  getOperationById: async (id) => {
    try {
      const response = await axios.get(`${API_URL}/${id}`);
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration de l'op√©ration:", error);
      throw error;
    }
  },

  // üîπ Cr√©er une nouvelle op√©ration
  createOperation: async (data) => {
    try {
      const response = await axios.post(API_URL, data);
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la cr√©ation de l'op√©ration:", error);
      throw error;
    }
  },

  // üîπ Mettre √† jour une op√©ration existante
  updateOperation: async (id, data) => {
    try {
      const response = await axios.put(`${API_URL}/${id}`, data);
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'op√©ration:", error);
      throw error;
    }
  },

  // üîπ Supprimer une op√©ration
  deleteOperation: async (id) => {
    try {
      const response = await axios.delete(`${API_URL}/${id}`);
      return response.data;
    } catch (error) {
      console.error("Erreur lors de la suppression de l'op√©ration:", error);
      throw error;
    }
  }
};

export default OperationService;
