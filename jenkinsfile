pipeline {
    agent any
    stages {
        stage('Install dependencies') {
            steps {
                script {
                    def projects = ['BackOffice', 'FrontOffice', 'Serveur']
                    projects.each { dir ->
                        sh "cd ${dir} && npm install --legacy-peer-deps"
                    }
                }
            }
        }
        stage('Unit Test') {
            steps {
                script {
                    sh "cd FrontOffice && npm  test "  
                    def legacyProjects = ['BackOffice', 'Serveur']
                    legacyProjects.each { dir ->
                        sh "cd ${dir} && npm test -- --passWithNoTests"
                    }
                }
            }
        }

     stage('Build application') {
        steps {
            script {
                def projects = ['BackOffice', 'FrontOffice', 'Serveur']
                projects.each { dir ->
                    if (dir == 'FrontOffice') {
                        sh "cd ${dir} && npm run build"
                    } else if (dir == 'BackOffice') {
                        sh "cd ${dir} && npm run build-dev"
                    } else if (dir == 'Serveur') {
                        sh "cd ${dir} && npm run build"
                    }
                }
            }
        }
      }
 
        stage('SonarQube Analysis') {
        steps {
            script {
                def projects = ['BackOffice', 'FrontOffice', 'Serveur']
                projects.each { folderName ->
                    dir(folderName) {
                        withSonarQubeEnv('SonarQube') {
                            sh 'sonar-scanner'
                        }
                    }
                }
            }
        }
    }


   }
}
